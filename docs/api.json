{
    "main": {
        "doc": "Ungrouped commands.",
        "commands": [
            {
                "name": "block_show",
                "description": "Get contents of a block",
                "arguments": [
                    {
                        "name": "blockhash",
                        "type": "str",
                        "description": "hash of the block to look up",
                        "is_required": true
                    },
                    {
                        "name": "height",
                        "type": "int",
                        "description": "height of the block to look up",
                        "is_required": true
                    }
                ],
                "returns": "(dict) Requested block",
                "examples": []
            },
            {
                "name": "get",
                "description": "Download stream from a LBRY name.",
                "arguments": [
                    {
                        "name": "uri",
                        "type": "str",
                        "description": "uri of the content to download",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "specified name for the downloaded file",
                        "is_required": false
                    },
                    {
                        "name": "timeout",
                        "type": "int",
                        "description": "download timeout in number of seconds",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"completed\": \"(bool) true if download is completed\",\n                \"file_name\": \"(str) name of file\",\n                \"download_directory\": \"(str) download directory\",\n                \"points_paid\": \"(float) credit paid to download file\",\n                \"stopped\": \"(bool) true if download is stopped\",\n                \"stream_hash\": \"(str) stream hash of file\",\n                \"stream_name\": \"(str) stream name\",\n                \"suggested_file_name\": \"(str) suggested file name\",\n                \"sd_hash\": \"(str) sd hash of file\",\n                \"download_path\": \"(str) download path of file\",\n                \"mime_type\": \"(str) mime type of file\",\n                \"key\": \"(str) key attached to file\",\n                \"total_bytes_lower_bound\": \"(int) lower bound file size in bytes\",\n                \"total_bytes\": \"(int) file upper bound size in bytes\",\n                \"written_bytes\": \"(int) written size in bytes\",\n                \"blobs_completed\": \"(int) number of fully downloaded blobs\",\n                \"blobs_in_stream\": \"(int) total blobs on stream\",\n                \"blobs_remaining\": \"(int) total blobs remaining to download\",\n                \"status\": \"(str) downloader status\",\n                \"claim_id\": \"(str) None if claim is not found else the claim id\",\n                \"txid\": \"(str) None if claim is not found else the transaction id\",\n                \"nout\": \"(int) None if claim is not found else the transaction output index\",\n                \"outpoint\": \"(str) None if claim is not found else the tx and output\",\n                \"metadata\": \"(dict) None if claim is not found else the claim metadata\",\n                \"channel_claim_id\": \"(str) None if claim is not found or not signed\",\n                \"channel_name\": \"(str) None if claim is not found or not signed\",\n                \"claim_name\": \"(str) None if claim is not found else the claim name\"\n            }",
                "examples": [
                    {
                        "title": "Get a file",
                        "curl": "curl -d'{\"method\": \"get\", \"params\": {\"uri\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet get astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"get\", \"params\": {\"uri\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"blobs_completed\": 1,\n    \"blobs_in_stream\": 1,\n    \"blobs_remaining\": 0,\n    \"channel_claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n    \"channel_name\": \"@channel\",\n    \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n    \"claim_name\": \"astream\",\n    \"completed\": false,\n    \"download_directory\": \"/tmp/tmprlkz78lb\",\n    \"download_path\": \"/tmp/tmprlkz78lb/tmpit97x87b\",\n    \"file_name\": \"tmpit97x87b\",\n    \"key\": \"40d70a655061b7981b6d36a84d985fdc\",\n    \"metadata\": {\n      \"source\": {\n        \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n        \"media_type\": \"application/octet-stream\",\n        \"name\": \"tmpit97x87b\",\n        \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n        \"size\": \"11\"\n      }\n    },\n    \"mime_type\": \"application/octet-stream\",\n    \"nout\": 0,\n    \"outpoint\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898:0\",\n    \"points_paid\": 0.0,\n    \"protobuf\": \"01cf859b7d5b44ee82281311805c97781f222d24cce145c0ad7c3c76cd83b5f8044d097413f4198e39a8b4d8012e4055de83212fb94c12834f444142c49a9f46a786b31236b79c7612bdfccae897ef372792b9894e0a7f0a7d0a20b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9120b746d706974393778383762180b22186170706c69636174696f6e2f6f637465742d73747265616d3230a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n    \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n    \"status\": \"running\",\n    \"stopped\": false,\n    \"stream_hash\": \"5bb823532eb1994bbb6c4a7ac44713249768f6e329e6e58a2c1e128ef9a029f850c30757909d0f961f7143a3b7ea439f\",\n    \"stream_name\": \"tmpit97x87b\",\n    \"suggested_file_name\": \"tmpit97x87b\",\n    \"total_bytes\": 16,\n    \"total_bytes_lower_bound\": 0,\n    \"tx\": null,\n    \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n    \"written_bytes\": 11\n  }\n}"
                    }
                ]
            },
            {
                "name": "publish",
                "description": "Create or update a stream claim at a given name (use 'stream create/update' for more control).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "name of the content (can only consist of a-z A-Z 0-9 and -(dash))",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": false
                    },
                    {
                        "name": "file_path",
                        "type": "str",
                        "description": "path to file to be associated with name.",
                        "is_required": false
                    },
                    {
                        "name": "fee_currency",
                        "type": "string",
                        "description": "specify fee currency",
                        "is_required": false
                    },
                    {
                        "name": "fee_amount",
                        "type": "decimal",
                        "description": "content download fee",
                        "is_required": false
                    },
                    {
                        "name": "fee_address",
                        "type": "str",
                        "description": "address where to send fee payments, will use value from --claim_address if not provided",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "author",
                        "type": "str",
                        "description": "author of the publication. The usage for this field is not the same as for channels. The author field is used to credit an author who is not the publisher and is not represented by the channel. For example, a pdf file of 'The Odyssey' has an author of 'Homer' but may by published to a channel such as '@classics', or to no channel at all",
                        "is_required": false
                    },
                    {
                        "name": "clear_tags",
                        "type": "bool",
                        "description": "clear existing tags (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "add content tags",
                        "is_required": false
                    },
                    {
                        "name": "clear_languages",
                        "type": "bool",
                        "description": "clear existing languages (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "clear_locations",
                        "type": "bool",
                        "description": "clear existing locations (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations relevant to the stream, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "license",
                        "type": "str",
                        "description": "publication license",
                        "is_required": false
                    },
                    {
                        "name": "license_url",
                        "type": "str",
                        "description": "publication license url",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "release_time",
                        "type": "int",
                        "description": "original public release of content, seconds since UNIX epoch",
                        "is_required": false
                    },
                    {
                        "name": "width",
                        "type": "int",
                        "description": "image/video width, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "height",
                        "type": "int",
                        "description": "image/video height, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "duration",
                        "type": "int",
                        "description": "audio/video duration in seconds, automatically calculated",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "name of publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to use for funding the transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the claim is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Publish a file",
                        "curl": "curl -d'{\"method\": \"publish\", \"params\": {\"name\": \"a-new-stream\", \"bid\": \"1.0\", \"file_path\": \"/tmp/tmpaus_fgla\", \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"channel_account_id\": [], \"preview\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet publish a-new-stream --bid=1.0 --file_path=/tmp/tmpaus_fgla",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"publish\", \"params\": {\"name\": \"a-new-stream\", \"bid\": \"1.0\", \"file_path\": \"/tmp/tmpaus_fgla\", \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"channel_account_id\": [], \"preview\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001a195344fcc2aa208da963a9ca262a84fe56c3b03a65b242a739d426daa565059010000006a47304402201f3ab0570cfaa6a50563bbf0c32a7c49013d32480f782cb164341e38cddf340302201956aa452a4806f63f8ff5cedd0914f42e02b44738639c875162f9141e9870670121034fc65cb8aeeb5fc4d4b40b62be1a9b737c6bf66cfea38b1f7788374c61efeb84ffffffff0200e1f50500000000adb50c612d6e65772d73747265616d4c82000a7f0a7d0a20b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9120b746d706175735f66676c61180b22186170706c69636174696f6e2f6f637465742d73747265616d3230a2e3c653b012ca01628a02ffe19052ceea10595583fe3b30a00cbeb5fc0c5b7edda2b625c1bc28286b7a3c93a7c104446d7576a914588cf101f723605e989369e9a6100bbb13d452c488ace0b46217000000001976a914e0b1ec0abfeede4d75e67d97ca0dfe22ea0fcbc088ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mushjCzKC83rDwJxoYeC6JRp8R6AEA9Ecw\",\n        \"amount\": \"4.947555\",\n        \"confirmations\": 4,\n        \"height\": 215,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 1,\n        \"txid\": \"595056aa6d429d732a245ba6033b6ce54fa862a29c3a96da08a22acc4f3495a1\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mobAbiapbJhWi96iWmm6kS4kPA853qnDD6\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"c3876e43947871868bba4e42a76b10b9a0aa0947\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"name\": \"a-new-stream\",\n        \"nout\": 0,\n        \"permanent_url\": \"a-new-stream#c3876e43947871868bba4e42a76b10b9a0aa0947\",\n        \"txid\": \"9f5d3bb201aa0a1246ba470c702690ec41f7481668ad6b1b191dfb9349f8aa8d\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpaus_fgla\",\n            \"sd_hash\": \"a2e3c653b012ca01628a02ffe19052ceea10595583fe3b30a00cbeb5fc0c5b7edda2b625c1bc28286b7a3c93a7c10444\",\n            \"size\": \"11\"\n          }\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"n212oGGTLcpCzjPgnt1HHkn1wdvFxyf3hm\",\n        \"amount\": \"3.923448\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"txid\": \"9f5d3bb201aa0a1246ba470c702690ec41f7481668ad6b1b191dfb9349f8aa8d\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.024107\",\n    \"total_input\": \"4.947555\",\n    \"total_output\": \"4.923448\",\n    \"txid\": \"9f5d3bb201aa0a1246ba470c702690ec41f7481668ad6b1b191dfb9349f8aa8d\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "resolve",
                "description": "Get the claim that a URL refers to.",
                "arguments": [
                    {
                        "name": "urls",
                        "type": "str, list",
                        "description": "one or more urls to resolve",
                        "is_required": false
                    }
                ],
                "returns": "Dictionary of results, keyed by url\n    '<url>': {\n            If a resolution error occurs:\n            'error': Error message\n\n            If the url resolves to a channel or a claim in a channel:\n            'certificate': {\n                'address': (str) claim address,\n                'amount': (float) claim amount,\n                'effective_amount': (float) claim amount including supports,\n                'claim_id': (str) claim id,\n                'claim_sequence': (int) claim sequence number (or -1 if unknown),\n                'decoded_claim': (bool) whether or not the claim value was decoded,\n                'height': (int) claim height,\n                'depth': (int) claim depth,\n                'has_signature': (bool) included if decoded_claim\n                'name': (str) claim name,\n                'permanent_url': (str) permanent url of the certificate claim,\n                'supports: (list) list of supports [{'txid': (str) txid,\n                                                     'nout': (int) nout,\n                                                     'amount': (float) amount}],\n                'txid': (str) claim txid,\n                'nout': (str) claim nout,\n                'signature_is_valid': (bool), included if has_signature,\n                'value': ClaimDict if decoded, otherwise hex string\n            }\n\n            If the url resolves to a channel:\n            'claims_in_channel': (int) number of claims in the channel,\n\n            If the url resolves to a claim:\n            'claim': {\n                'address': (str) claim address,\n                'amount': (float) claim amount,\n                'effective_amount': (float) claim amount including supports,\n                'claim_id': (str) claim id,\n                'claim_sequence': (int) claim sequence number (or -1 if unknown),\n                'decoded_claim': (bool) whether or not the claim value was decoded,\n                'height': (int) claim height,\n                'depth': (int) claim depth,\n                'has_signature': (bool) included if decoded_claim\n                'name': (str) claim name,\n                'permanent_url': (str) permanent url of the claim,\n                'channel_name': (str) channel name if claim is in a channel\n                'supports: (list) list of supports [{'txid': (str) txid,\n                                                     'nout': (int) nout,\n                                                     'amount': (float) amount}]\n                'txid': (str) claim txid,\n                'nout': (str) claim nout,\n                'signature_is_valid': (bool), included if has_signature,\n                'value': ClaimDict if decoded, otherwise hex string\n            }\n    }",
                "examples": [
                    {
                        "title": "Resolve a claim",
                        "curl": "curl -d'{\"method\": \"resolve\", \"params\": {\"urls\": [\"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\"]}}' http://localhost:5279/",
                        "lbrynet": "lbrynet resolve astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"resolve\", \"params\": {\"urls\": [\"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\"]}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\": {\n      \"certificate\": {\n        \"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"claim_sequence\": -1,\n        \"decoded_claim\": true,\n        \"depth\": 7,\n        \"effective_amount\": \"1.0\",\n        \"has_signature\": false,\n        \"height\": 210,\n        \"name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"protobuf\": \"00125a0a583056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119420b4e6577204368616e6e656c\",\n        \"supports\": [],\n        \"txid\": \"c80b9538d918ade5a19c7176dd25a6f864bbaa451e35879fa76090f680f74e77\",\n        \"valid_at_height\": 210,\n        \"value\": {\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n          \"title\": \"New Channel\"\n        }\n      },\n      \"claim\": {\n        \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n        \"amount\": \"1.0\",\n        \"channel_name\": \"@channel\",\n        \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"claim_sequence\": -1,\n        \"decoded_claim\": true,\n        \"depth\": 3,\n        \"effective_amount\": \"1.0\",\n        \"has_signature\": true,\n        \"height\": 214,\n        \"is_channel_signature_valid\": true,\n        \"name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"protobuf\": \"01cf859b7d5b44ee82281311805c97781f222d24cce145c0ad7c3c76cd83b5f8044d097413f4198e39a8b4d8012e4055de83212fb94c12834f444142c49a9f46a786b31236b79c7612bdfccae897ef372792b9894e0a7f0a7d0a20b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9120b746d706974393778383762180b22186170706c69636174696f6e2f6f637465742d73747265616d3230a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n        \"signature_is_valid\": true,\n        \"signing_channel\": {\n          \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n          \"name\": \"@channel\",\n          \"value\": {\n            \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n            \"title\": \"New Channel\"\n          }\n        },\n        \"supports\": [],\n        \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n        \"valid_at_height\": 214,\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpit97x87b\",\n            \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n            \"size\": \"11\"\n          }\n        }\n      },\n      \"claims_in_channel\": 0\n    }\n  }\n}"
                    }
                ]
            },
            {
                "name": "routing_table_get",
                "description": "Get DHT routing information",
                "arguments": [],
                "returns": "(dict) dictionary containing routing and peer information\n    {\n        \"buckets\": {\n            <bucket index>: [\n                {\n                    \"address\": (str) peer address,\n                    \"udp_port\": (int) peer udp port,\n                    \"tcp_port\": (int) peer tcp port,\n                    \"node_id\": (str) peer node id,\n                }\n            ]\n        },\n        \"node_id\": (str) the local dht node id\n    }",
                "examples": []
            },
            {
                "name": "status",
                "description": "Get daemon status",
                "arguments": [],
                "returns": "(dict) lbrynet-daemon status\n    {\n        'installation_id': (str) installation id - base58,\n        'is_running': (bool),\n        'skipped_components': (list) [names of skipped components (str)],\n        'startup_status': { Does not include components which have been skipped\n            'blob_manager': (bool),\n            'blockchain_headers': (bool),\n            'database': (bool),\n            'dht': (bool),\n            'exchange_rate_manager': (bool),\n            'hash_announcer': (bool),\n            'peer_protocol_server': (bool),\n            'stream_manager': (bool),\n            'upnp': (bool),\n            'wallet': (bool),\n        },\n        'connection_status': {\n            'code': (str) connection status code,\n            'message': (str) connection status message\n        },\n        'blockchain_headers': {\n            'downloading_headers': (bool),\n            'download_progress': (float) 0-100.0\n        },\n        'wallet': {\n            'blocks': (int) local blockchain height,\n            'blocks_behind': (int) remote_height - local_height,\n            'best_blockhash': (str) block hash of most recent block,\n            'is_encrypted': (bool),\n            'is_locked': (bool),\n        },\n        'dht': {\n            'node_id': (str) lbry dht node id - hex encoded,\n            'peers_in_routing_table': (int) the number of peers in the routing table,\n        },\n        'blob_manager': {\n            'finished_blobs': (int) number of finished blobs in the blob manager,\n        },\n        'hash_announcer': {\n            'announce_queue_size': (int) number of blobs currently queued to be announced\n        },\n        'stream_manager': {\n            'managed_files': (int) count of files in the stream manager,\n        },\n        'upnp': {\n            'aioupnp_version': (str),\n            'redirects': {\n                <TCP | UDP>: (int) external_port,\n            },\n            'gateway': (str) manufacturer and model,\n            'dht_redirect_set': (bool),\n            'peer_redirect_set': (bool),\n            'external_ip': (str) external ip address,\n        }\n    }",
                "examples": [
                    {
                        "title": "Get status",
                        "curl": "curl -d'{\"method\": \"status\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet status",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"status\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"blob_manager\": {\n      \"finished_blobs\": 0\n    },\n    \"connection_status\": {\n      \"code\": \"connected\",\n      \"message\": \"No connection problems detected\"\n    },\n    \"installation_id\": \"4tp3Nb4VFzDHH7K5sifwzWn4do28CSQ9LuWRBiQGhthLh6Stwe4TWz3j76sjRDUHtx\",\n    \"is_running\": true,\n    \"skipped_components\": [\n      \"dht\",\n      \"upnp\",\n      \"hash_announcer\",\n      \"peer_protocol_server\"\n    ],\n    \"startup_status\": {\n      \"blob_manager\": true,\n      \"blockchain_headers\": true,\n      \"database\": true,\n      \"exchange_rate_manager\": true,\n      \"stream_manager\": true,\n      \"wallet\": true\n    },\n    \"stream_manager\": {\n      \"managed_files\": 0\n    },\n    \"wallet\": {\n      \"best_blockhash\": \"02af940c99fbb24c6b15bae251bb20b5118e71bada9078035da2934b4a8f66c8\",\n      \"blocks\": 206,\n      \"blocks_behind\": 0,\n      \"is_encrypted\": false,\n      \"is_locked\": false\n    }\n  }\n}"
                    }
                ]
            },
            {
                "name": "stop",
                "description": "Stop lbrynet API server.",
                "arguments": [],
                "returns": "(string) Shutdown message",
                "examples": []
            },
            {
                "name": "version",
                "description": "Get lbrynet API server version information",
                "arguments": [],
                "returns": "(dict) Dictionary of lbry version information\n    {\n        'build': (str) build type (e.g. \"dev\", \"rc\", \"release\"),\n        'ip': (str) remote ip, if available,\n        'lbrynet_version': (str) lbrynet_version,\n        'lbryum_version': (str) lbryum_version,\n        'lbryschema_version': (str) lbryschema_version,\n        'os_release': (str) os release string\n        'os_system': (str) os name\n        'platform': (str) platform string\n        'processor': (str) processor type,\n        'python_version': (str) python version,\n    }",
                "examples": [
                    {
                        "title": "Get version",
                        "curl": "curl -d'{\"method\": \"version\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet version",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"version\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"build\": \"dev\",\n    \"desktop\": \"GNOME\",\n    \"distro\": {\n      \"codename\": \"xenial\",\n      \"id\": \"ubuntu\",\n      \"like\": \"debian\",\n      \"version\": \"16.04\",\n      \"version_parts\": {\n        \"build_number\": \"\",\n        \"major\": \"16\",\n        \"minor\": \"04\"\n      }\n    },\n    \"lbrynet_version\": \"0.36.0rc3\",\n    \"os_release\": \"4.4.0-116-generic\",\n    \"os_system\": \"Linux\",\n    \"platform\": \"Linux-4.4.0-116-generic-x86_64-with-Ubuntu-16.04-xenial\",\n    \"processor\": \"x86_64\",\n    \"python_version\": \"3.7.2\"\n  }\n}"
                    }
                ]
            }
        ]
    },
    "account": {
        "doc": "Create, modify and inspect wallet accounts.",
        "commands": [
            {
                "name": "account_add",
                "description": "Add a previously created account from a seed, private key or public key (read-only).\nSpecify --single_key for single address or vanity address accounts.",
                "arguments": [
                    {
                        "name": "account_name",
                        "type": "str",
                        "description": "name of the account to add",
                        "is_required": true
                    },
                    {
                        "name": "seed",
                        "type": "str",
                        "description": "seed to generate new account from",
                        "is_required": false
                    },
                    {
                        "name": "private_key",
                        "type": "str",
                        "description": "private key for new account",
                        "is_required": false
                    },
                    {
                        "name": "public_key",
                        "type": "str",
                        "description": "public key for new account",
                        "is_required": false
                    },
                    {
                        "name": "single_key",
                        "type": "bool",
                        "description": "create single key account, default is multi-key",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"id\": \"account_id\",\n                \"is_default\": \"this account is used by default\",\n                \"ledger\": \"name of crypto currency and network\",\n                \"name\": \"optional account name\",\n                \"seed\": \"human friendly words from which account can be recreated\",\n                \"encrypted\": \"if account is encrypted\",\n                \"private_key\": \"extended private key\",\n                \"public_key\": \"extended public key\",\n                \"address_generator\": \"settings for generating addresses\",\n                \"modified_on\": \"date of last modification to account settings\"\n            }",
                "examples": [
                    {
                        "title": "Add an account from seed",
                        "curl": "curl -d'{\"method\": \"account_add\", \"params\": {\"account_name\": \"new account\", \"seed\": \"chimney shoe next upgrade oil toe since scatter banana mix cloth banana\", \"single_key\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account add \"new account\" --seed=\"chimney shoe next upgrade oil toe since scatter banana mix cloth banana\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_add\", \"params\": {\"account_name\": \"new account\", \"seed\": \"chimney shoe next upgrade oil toe since scatter banana mix cloth banana\", \"single_key\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"address_generator\": {\n      \"change\": {\n        \"gap\": 6,\n        \"maximum_uses_per_address\": 1\n      },\n      \"name\": \"deterministic-chain\",\n      \"receiving\": {\n        \"gap\": 20,\n        \"maximum_uses_per_address\": 1\n      }\n    },\n    \"encrypted\": false,\n    \"id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\",\n    \"is_default\": false,\n    \"ledger\": \"lbc_regtest\",\n    \"modified_on\": 1555941584.139002,\n    \"name\": \"new account\",\n    \"private_key\": \"tprv8ZgxMBicQKsPeS4f6CHZms9bqnK6UjAfa1a6zU8SFsZHRUMKNMUhs7t4a7Uq7EfjpKzNoLJH27D1SAhWASFPiUUy6PJcEY6jBkGryJyadTF\",\n    \"public_key\": \"tpubD6NzVbkrYhZ4Xu6SyqxABGoiQoq2e4Ma9KAtGzAjg9MgFxc5zkJJ3cVvkH8zrXE5pUeyKSv8zqDA5N1WWUW3ZYdge2BzyuiPmSCe7bj9UZe\",\n    \"seed\": \"chimney shoe next upgrade oil toe since scatter banana mix cloth banana\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_balance",
                "description": "Return the balance of an account",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "If provided only the balance for this account will be given. Otherwise default account.",
                        "is_required": false
                    },
                    {
                        "name": "confirmations",
                        "type": "int",
                        "description": "Only include transactions with this many confirmed blocks.",
                        "is_required": false
                    }
                ],
                "returns": "(decimal) amount of lbry credits in wallet",
                "examples": [
                    {
                        "title": "Get default account balance",
                        "curl": "curl -d'{\"method\": \"account_balance\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account balance",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_balance\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"7.999876\"\n}"
                    },
                    {
                        "title": "Get balance for specific account by id",
                        "curl": "curl -d'{\"method\": \"account_balance\", \"params\": {\"account_id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account balance \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_balance\", \"params\": {\"account_id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"2.0\"\n}"
                    }
                ]
            },
            {
                "name": "account_create",
                "description": "Create a new account. Specify --single_key if you want to use\nthe same address for all transactions (not recommended).",
                "arguments": [
                    {
                        "name": "account_name",
                        "type": "str",
                        "description": "name of the account to create",
                        "is_required": true
                    },
                    {
                        "name": "single_key",
                        "type": "bool",
                        "description": "create single key account, default is multi-key",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"id\": \"account_id\",\n                \"is_default\": \"this account is used by default\",\n                \"ledger\": \"name of crypto currency and network\",\n                \"name\": \"optional account name\",\n                \"seed\": \"human friendly words from which account can be recreated\",\n                \"encrypted\": \"if account is encrypted\",\n                \"private_key\": \"extended private key\",\n                \"public_key\": \"extended public key\",\n                \"address_generator\": \"settings for generating addresses\",\n                \"modified_on\": \"date of last modification to account settings\"\n            }",
                "examples": [
                    {
                        "title": "Create an account",
                        "curl": "curl -d'{\"method\": \"account_create\", \"params\": {\"account_name\": \"generated account\", \"single_key\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account create \"generated account\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_create\", \"params\": {\"account_name\": \"generated account\", \"single_key\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"address_generator\": {\n      \"change\": {\n        \"gap\": 6,\n        \"maximum_uses_per_address\": 1\n      },\n      \"name\": \"deterministic-chain\",\n      \"receiving\": {\n        \"gap\": 20,\n        \"maximum_uses_per_address\": 1\n      }\n    },\n    \"encrypted\": false,\n    \"id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\",\n    \"is_default\": false,\n    \"ledger\": \"lbc_regtest\",\n    \"modified_on\": 1555941584.0031657,\n    \"name\": \"generated account\",\n    \"private_key\": \"tprv8ZgxMBicQKsPeS4f6CHZms9bqnK6UjAfa1a6zU8SFsZHRUMKNMUhs7t4a7Uq7EfjpKzNoLJH27D1SAhWASFPiUUy6PJcEY6jBkGryJyadTF\",\n    \"public_key\": \"tpubD6NzVbkrYhZ4Xu6SyqxABGoiQoq2e4Ma9KAtGzAjg9MgFxc5zkJJ3cVvkH8zrXE5pUeyKSv8zqDA5N1WWUW3ZYdge2BzyuiPmSCe7bj9UZe\",\n    \"seed\": \"chimney shoe next upgrade oil toe since scatter banana mix cloth banana\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_decrypt",
                "description": "Decrypt an encrypted account, this will remove the wallet password. The account must be unlocked to decrypt it",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id for the account to decrypt",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if wallet is decrypted, otherwise false",
                "examples": []
            },
            {
                "name": "account_encrypt",
                "description": "Encrypt an unencrypted account with a password",
                "arguments": [
                    {
                        "name": "new_password",
                        "type": "str",
                        "description": "password to encrypt account",
                        "is_required": true
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id for the account to encrypt, encrypts default account if not provided",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if wallet is decrypted, otherwise false",
                "examples": []
            },
            {
                "name": "account_fund",
                "description": "Transfer some amount (or --everything) to an account from another\naccount (can be the same account). Amounts are interpreted as LBC.\nYou can also spread the transfer across a number of --outputs (cannot\nbe used together with --everything).",
                "arguments": [
                    {
                        "name": "to_account",
                        "type": "str",
                        "description": "send to this account",
                        "is_required": false
                    },
                    {
                        "name": "from_account",
                        "type": "str",
                        "description": "spend from this account",
                        "is_required": false
                    },
                    {
                        "name": "amount",
                        "type": "str",
                        "description": "the amount to transfer lbc",
                        "is_required": true
                    },
                    {
                        "name": "everything",
                        "type": "bool",
                        "description": "transfer everything (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "outputs",
                        "type": "int",
                        "description": "split payment across many outputs, default: 1.",
                        "is_required": false
                    },
                    {
                        "name": "broadcast",
                        "type": "bool",
                        "description": "actually broadcast the transaction, default: false.",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Transfer 2 LBC from default account to specific account",
                        "curl": "curl -d'{\"method\": \"account_fund\", \"params\": {\"to_account\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"amount\": \"2.0\", \"everything\": false, \"broadcast\": true}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account fund --to_account=\"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\" --amount=2.0 --broadcast",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_fund\", \"params\": {\"to_account\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"amount\": \"2.0\", \"everything\": false, \"broadcast\": true}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001ac37a139c2674777d4c7789f5427005b4aa36642f614e9e147ab96b686173dc6010000006b483045022100f5a53db541d74e1be29cdfecbcd204914ba6d1f8ec8da8328d672de85120115a02206987b289030bda1e3beb059792cbb6300a7bd69a4db5badd2429d1d54a8bd7ad012102267211abbf788bda05f11be874cb53f1cb193bcf447e75a97011ba99d097b28cffffffff0200c2eb0b000000001976a9148942a5f74b3ac0884e6a1ed6f5e3f1a6859d5d6888ac90d7ae2f000000001976a91405a7e8221c667027351dc275ef165f841ec0d61088ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mrUJMH9thbp8N36pUWEwLbWhHS34396nrL\",\n        \"amount\": \"10.0\",\n        \"confirmations\": 6,\n        \"height\": 201,\n        \"is_change\": false,\n        \"is_mine\": true,\n        \"nout\": 1,\n        \"txid\": \"c63d1786b696ab47e1e914f64266a34a5b0027549f78c7d4774767c239a137ac\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mt2ii95pM4P7G8MUAB7usLP8zLsYyPHVk8\",\n        \"amount\": \"2.0\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"txid\": \"54077accaaa814dd35b2cc6bc59db0e6ff9bbcf0aed151b2e22465579b58341e\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"mg2rpNzx5bSBdqV1CADR98pRjtG8USWWUL\",\n        \"amount\": \"7.999876\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"txid\": \"54077accaaa814dd35b2cc6bc59db0e6ff9bbcf0aed151b2e22465579b58341e\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000124\",\n    \"total_input\": \"10.0\",\n    \"total_output\": \"9.999876\",\n    \"txid\": \"54077accaaa814dd35b2cc6bc59db0e6ff9bbcf0aed151b2e22465579b58341e\"\n  }\n}"
                    },
                    {
                        "title": "Spread LBC between multiple addresses",
                        "curl": "curl -d'{\"method\": \"account_fund\", \"params\": {\"to_account\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"from_account\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"amount\": \"1.5\", \"everything\": false, \"outputs\": 2, \"broadcast\": true}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account fund --to_account=\"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\" --from_account=\"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\" --amount=1.5 --outputs=2 --broadcast",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_fund\", \"params\": {\"to_account\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"from_account\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"amount\": \"1.5\", \"everything\": false, \"outputs\": 2, \"broadcast\": true}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000011e34589b576524e2b251d1aef0bc9bffe6b09dc56bccb235dd14a8aacc7a0754000000006b48304502210082b574cba7cd91fea5b5e8f1bee080e708ca1cc8be5965a2f86dc0b5a30ba63d02207ed9c512a8173aab4877b9d248c695cd24841a2a30020ed5a8fd3dbb5d5c9985012103f2b3ef3d1fa473c97fd1c263b023362ffc636ffa8a751de8f2e345e79a18552dffffffff03c0687804000000001976a9147a54ff72598e0ddda1c88c5a3bffeec278e3599988acc0687804000000001976a9147a54ff72598e0ddda1c88c5a3bffeec278e3599988ac6cb9fa02000000001976a9148942a5f74b3ac0884e6a1ed6f5e3f1a6859d5d6888ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mt2ii95pM4P7G8MUAB7usLP8zLsYyPHVk8\",\n        \"amount\": \"2.0\",\n        \"confirmations\": 1,\n        \"height\": 207,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 0,\n        \"txid\": \"54077accaaa814dd35b2cc6bc59db0e6ff9bbcf0aed151b2e22465579b58341e\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mrfnZDB2FMuaiZQgcytQyQGCucHQ86cxg9\",\n        \"amount\": \"0.75\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"txid\": \"dc3cbb02781b19136026723e2a0bc461fc12a4caad6d3b5afb5ea2a40e12ee8f\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"mrfnZDB2FMuaiZQgcytQyQGCucHQ86cxg9\",\n        \"amount\": \"0.75\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"txid\": \"dc3cbb02781b19136026723e2a0bc461fc12a4caad6d3b5afb5ea2a40e12ee8f\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"mt2ii95pM4P7G8MUAB7usLP8zLsYyPHVk8\",\n        \"amount\": \"0.499859\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 2,\n        \"txid\": \"dc3cbb02781b19136026723e2a0bc461fc12a4caad6d3b5afb5ea2a40e12ee8f\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000141\",\n    \"total_input\": \"2.0\",\n    \"total_output\": \"1.999859\",\n    \"txid\": \"dc3cbb02781b19136026723e2a0bc461fc12a4caad6d3b5afb5ea2a40e12ee8f\"\n  }\n}"
                    },
                    {
                        "title": "Transfer all LBC to a specified account",
                        "curl": "curl -d'{\"method\": \"account_fund\", \"params\": {\"from_account\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"everything\": true, \"broadcast\": true}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account fund --from_account=\"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\" --everything --broadcast",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_fund\", \"params\": {\"from_account\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"everything\": true, \"broadcast\": true}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000038fee120ea4a25efb5a3b6dadcaa412fc61c40b2a3e72266013191b7802bb3cdc020000006b483045022100c638c7a287b504ea99ea2ca7511e1f92f507c3d3452a5c17e72e2932769585d002203e37276b2bc0c8f1be1a0f781571dddbeaa042b35e6798169d7b7a48f2f84e02012103f2b3ef3d1fa473c97fd1c263b023362ffc636ffa8a751de8f2e345e79a18552dffffffff8fee120ea4a25efb5a3b6dadcaa412fc61c40b2a3e72266013191b7802bb3cdc000000006b483045022100b502e32233264508364efb6b4732320640ece56bb21e090d0ea5b14accc2c97002201d5d217466c9a86d986fa142d7522f0a5f4af49f7196433219283039c02a5e760121031fce1fedfb98ef06fb195ab1a6961b0af6e79865c6f8b358a45d588356065e2effffffff8fee120ea4a25efb5a3b6dadcaa412fc61c40b2a3e72266013191b7802bb3cdc010000006a473044022008d73060fc43c4bed279fe4a5c4e1eb56a92c90b734967a58ea637348ea45c39022039bd2ae74e70912ef654eda88965b7e331bd7720f85d069c0b61edcef32495fc0121031fce1fedfb98ef06fb195ab1a6961b0af6e79865c6f8b358a45d588356065e2effffffff015027eb0b000000001976a91449264b778030006ea39e77e4e291528d4238dab688ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mt2ii95pM4P7G8MUAB7usLP8zLsYyPHVk8\",\n        \"amount\": \"0.499859\",\n        \"confirmations\": 1,\n        \"height\": 208,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 2,\n        \"txid\": \"dc3cbb02781b19136026723e2a0bc461fc12a4caad6d3b5afb5ea2a40e12ee8f\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"mrfnZDB2FMuaiZQgcytQyQGCucHQ86cxg9\",\n        \"amount\": \"0.75\",\n        \"confirmations\": 1,\n        \"height\": 208,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 0,\n        \"txid\": \"dc3cbb02781b19136026723e2a0bc461fc12a4caad6d3b5afb5ea2a40e12ee8f\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"mrfnZDB2FMuaiZQgcytQyQGCucHQ86cxg9\",\n        \"amount\": \"0.75\",\n        \"confirmations\": 1,\n        \"height\": 208,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 1,\n        \"txid\": \"dc3cbb02781b19136026723e2a0bc461fc12a4caad6d3b5afb5ea2a40e12ee8f\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mnBjVptRpCyzSdVFR8uwqNkmDpScxHHYG9\",\n        \"amount\": \"1.999604\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"txid\": \"4bb57d779f5ac678d49a02c71070833935e3f7525ba28f9cb0cbd8b09d6c94eb\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000255\",\n    \"total_input\": \"1.999859\",\n    \"total_output\": \"1.999604\",\n    \"txid\": \"4bb57d779f5ac678d49a02c71070833935e3f7525ba28f9cb0cbd8b09d6c94eb\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_list",
                "description": "List details of all of the accounts or a specific account.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "If provided only the balance for this account will be given",
                        "is_required": false
                    },
                    {
                        "name": "confirmations",
                        "type": "int",
                        "description": "required confirmations (default: 0)",
                        "is_required": false
                    },
                    {
                        "name": "include_claims",
                        "type": "bool",
                        "description": "include claims, requires than a LBC account is specified (default: false)",
                        "is_required": false
                    },
                    {
                        "name": "show_seed",
                        "type": "bool",
                        "description": "show the seed for the account",
                        "is_required": false
                    }
                ],
                "returns": "            [\n                {\n                    \"id\": \"account_id\",\n                    \"is_default\": \"this account is used by default\",\n                    \"ledger\": \"name of crypto currency and network\",\n                    \"name\": \"optional account name\",\n                    \"seed\": \"human friendly words from which account can be recreated\",\n                    \"encrypted\": \"if account is encrypted\",\n                    \"private_key\": \"extended private key\",\n                    \"public_key\": \"extended public key\",\n                    \"address_generator\": \"settings for generating addresses\",\n                    \"modified_on\": \"date of last modification to account settings\"\n                }\n            ]",
                "examples": [
                    {
                        "title": "List your accounts",
                        "curl": "curl -d'{\"method\": \"account_list\", \"params\": {\"include_claims\": false, \"show_seed\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_list\", \"params\": {\"include_claims\": false, \"show_seed\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"lbc_regtest\": [\n      {\n        \"address_generator\": {\n          \"change\": {\n            \"gap\": 6,\n            \"maximum_uses_per_address\": 1\n          },\n          \"name\": \"deterministic-chain\",\n          \"receiving\": {\n            \"gap\": 20,\n            \"maximum_uses_per_address\": 1\n          }\n        },\n        \"certificates\": 0,\n        \"coins\": 10.0,\n        \"encrypted\": false,\n        \"id\": \"mq9sbgNnMwy5ZsWW5YgS4vRQykSmhjqTz5\",\n        \"is_default\": true,\n        \"name\": \"Account #mq9sbgNnMwy5ZsWW5YgS4vRQykSmhjqTz5\",\n        \"public_key\": \"tpubD6NzVbkrYhZ4XGEmJycdW7mbyM7Y3tmDFUfbwXFxtbr1jdKfEAh9FGKeAzM2UdEx4fVDkL1wGdL72fdDoA5jSoLrjw2PXJkg7CbmqWjaPE2\",\n        \"satoshis\": 1000000000\n      }\n    ]\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_lock",
                "description": "Lock an unlocked account",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id for the account to lock",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if account is locked, otherwise false",
                "examples": []
            },
            {
                "name": "account_max_address_gap",
                "description": "Finds ranges of consecutive addresses that are unused and returns the length\nof the longest such range: for change and receiving address chains. This is\nuseful to figure out ideal values to set for 'receiving_gap' and 'change_gap'\naccount settings.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account for which to get max gaps",
                        "is_required": true
                    }
                ],
                "returns": "(map) maximum gap for change and receiving addresses",
                "examples": []
            },
            {
                "name": "account_remove",
                "description": "Remove an existing account.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to remove",
                        "is_required": true
                    }
                ],
                "returns": "            {\n                \"id\": \"account_id\",\n                \"is_default\": \"this account is used by default\",\n                \"ledger\": \"name of crypto currency and network\",\n                \"name\": \"optional account name\",\n                \"seed\": \"human friendly words from which account can be recreated\",\n                \"encrypted\": \"if account is encrypted\",\n                \"private_key\": \"extended private key\",\n                \"public_key\": \"extended public key\",\n                \"address_generator\": \"settings for generating addresses\",\n                \"modified_on\": \"date of last modification to account settings\"\n            }",
                "examples": [
                    {
                        "title": "Remove an account",
                        "curl": "curl -d'{\"method\": \"account_remove\", \"params\": {\"account_id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account remove mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_remove\", \"params\": {\"account_id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"address_generator\": {\n      \"change\": {\n        \"gap\": 6,\n        \"maximum_uses_per_address\": 1\n      },\n      \"name\": \"deterministic-chain\",\n      \"receiving\": {\n        \"gap\": 20,\n        \"maximum_uses_per_address\": 1\n      }\n    },\n    \"encrypted\": false,\n    \"id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\",\n    \"is_default\": false,\n    \"ledger\": \"lbc_regtest\",\n    \"modified_on\": 1555941584.0031657,\n    \"name\": \"generated account\",\n    \"private_key\": \"tprv8ZgxMBicQKsPeS4f6CHZms9bqnK6UjAfa1a6zU8SFsZHRUMKNMUhs7t4a7Uq7EfjpKzNoLJH27D1SAhWASFPiUUy6PJcEY6jBkGryJyadTF\",\n    \"public_key\": \"tpubD6NzVbkrYhZ4Xu6SyqxABGoiQoq2e4Ma9KAtGzAjg9MgFxc5zkJJ3cVvkH8zrXE5pUeyKSv8zqDA5N1WWUW3ZYdge2BzyuiPmSCe7bj9UZe\",\n    \"seed\": \"chimney shoe next upgrade oil toe since scatter banana mix cloth banana\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_send",
                "description": "Send the same number of credits to multiple addresses.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to fund the transaction",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "account_set",
                "description": "Change various settings on an account.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to change",
                        "is_required": true
                    },
                    {
                        "name": "default",
                        "type": "bool",
                        "description": "make this account the default",
                        "is_required": false
                    },
                    {
                        "name": "new_name",
                        "type": "str",
                        "description": "new name for the account",
                        "is_required": false
                    },
                    {
                        "name": "receiving_gap",
                        "type": "int",
                        "description": "set the gap for receiving addresses",
                        "is_required": false
                    },
                    {
                        "name": "receiving_max_uses",
                        "type": "int",
                        "description": "set the maximum number of times to use a receiving address",
                        "is_required": false
                    },
                    {
                        "name": "change_gap",
                        "type": "int",
                        "description": "set the gap for change addresses",
                        "is_required": false
                    },
                    {
                        "name": "change_max_uses",
                        "type": "int",
                        "description": "set the maximum number of times to use a change address",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"id\": \"account_id\",\n                \"is_default\": \"this account is used by default\",\n                \"ledger\": \"name of crypto currency and network\",\n                \"name\": \"optional account name\",\n                \"seed\": \"human friendly words from which account can be recreated\",\n                \"encrypted\": \"if account is encrypted\",\n                \"private_key\": \"extended private key\",\n                \"public_key\": \"extended public key\",\n                \"address_generator\": \"settings for generating addresses\",\n                \"modified_on\": \"date of last modification to account settings\"\n            }",
                "examples": [
                    {
                        "title": "Modify maximum number of times a change address can be reused",
                        "curl": "curl -d'{\"method\": \"account_set\", \"params\": {\"account_id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"default\": false, \"change_max_uses\": 10}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account set mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB --change_max_uses=10",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_set\", \"params\": {\"account_id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\", \"default\": false, \"change_max_uses\": 10}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"address_generator\": {\n      \"change\": {\n        \"gap\": 6,\n        \"maximum_uses_per_address\": 10\n      },\n      \"name\": \"deterministic-chain\",\n      \"receiving\": {\n        \"gap\": 20,\n        \"maximum_uses_per_address\": 1\n      }\n    },\n    \"encrypted\": false,\n    \"id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\",\n    \"is_default\": false,\n    \"ledger\": \"lbc_regtest\",\n    \"modified_on\": 1555941584.2003748,\n    \"name\": \"new account\",\n    \"private_key\": \"tprv8ZgxMBicQKsPeS4f6CHZms9bqnK6UjAfa1a6zU8SFsZHRUMKNMUhs7t4a7Uq7EfjpKzNoLJH27D1SAhWASFPiUUy6PJcEY6jBkGryJyadTF\",\n    \"public_key\": \"tpubD6NzVbkrYhZ4Xu6SyqxABGoiQoq2e4Ma9KAtGzAjg9MgFxc5zkJJ3cVvkH8zrXE5pUeyKSv8zqDA5N1WWUW3ZYdge2BzyuiPmSCe7bj9UZe\",\n    \"seed\": \"chimney shoe next upgrade oil toe since scatter banana mix cloth banana\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_unlock",
                "description": "Unlock an encrypted account",
                "arguments": [
                    {
                        "name": "password",
                        "type": "str",
                        "description": "password to use for unlocking",
                        "is_required": true
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id for the account to unlock, unlocks default account if not provided",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if account is unlocked, otherwise false",
                "examples": []
            }
        ]
    },
    "address": {
        "doc": "List, generate and verify addresses.",
        "commands": [
            {
                "name": "address_is_mine",
                "description": "Checks if an address is associated with the current wallet.",
                "arguments": [
                    {
                        "name": "address",
                        "type": "str",
                        "description": "address to check",
                        "is_required": true
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true, if address is associated with current wallet",
                "examples": [
                    {
                        "title": "Check if address is mine",
                        "curl": "curl -d'{\"method\": \"address_is_mine\", \"params\": {\"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet address is_mine mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"address_is_mine\", \"params\": {\"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": true\n}"
                    }
                ]
            },
            {
                "name": "address_list",
                "description": "List account addresses",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"items\": [\n                    \"an address in base58\"\n                ]\n            }",
                "examples": [
                    {
                        "title": "List addresses in default account",
                        "curl": "curl -d'{\"method\": \"address_list\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet address list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"address_list\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    \"mrUJMH9thbp8N36pUWEwLbWhHS34396nrL\",\n    \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n    \"mjP4LqHLgiZh9Yt85dPKoEQfyXZWYvW26o\",\n    \"motpLKY7NjMuAAikKCEctEsN7AgZZ8z9Fh\",\n    \"mobAbiapbJhWi96iWmm6kS4kPA853qnDD6\",\n    \"n3kXMe4wUH8PUcCMeGPUXWjKmjtay6qiiC\",\n    \"mqtMpfGy9u4edrqx6disinppzoPw1dM5TA\",\n    \"mx5gqJc4wqFVKJatCBX1wEVQUUbUWvLdpT\",\n    \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n    \"mgVPGtphs522HG6G9dEpLomsRjzRtNvyaD\",\n    \"mxEMUZnfrUqZ7LgGSJKpftTzhxN9ksL7u8\",\n    \"muZky9x51Anyg4e7vBmE7hvXDRyP5ob3Xt\",\n    \"mv3F3Amp2JPSMUz1BHRLfYFrdgoxUTHh4b\",\n    \"mfdcQg5Yw1eyxX1HkTUX4ifoMXcc7ckuvh\",\n    \"mtvUjchQiRbsQZwKXqCH5WCFmfbLiU5GSx\",\n    \"mk91amE4fy8ByNSyK2SFtQ5xx4DLLRVKxz\",\n    \"mzeJaFRZMKpA6vuhXszQn1b88My7PTUgVJ\",\n    \"n4Ustw8dtG4ZW4au3k1zPM3RcT1VrLNVSh\",\n    \"mpZxHB6QXGr8ZUoQa9RdHRxMiMd6SVMHZ9\",\n    \"mjCW8QbSjcGrDmpdzHcSiWT6d9XP2Bsw2P\",\n    \"mushjCzKC83rDwJxoYeC6JRp8R6AEA9Ecw\",\n    \"mwsrVmDgbmDB6Rc9PTQDfmq959XxZddN1e\",\n    \"mnBjVptRpCyzSdVFR8uwqNkmDpScxHHYG9\",\n    \"mgTmDwGvzP8dVkJz5kLf1PXGvW4X3Vi3a2\",\n    \"mjZ83yJJcNyft8kRd6NKSZUghFfePspvxU\",\n    \"mg2rpNzx5bSBdqV1CADR98pRjtG8USWWUL\",\n    \"mfhkhk4NyH3yqz8izDQRytx9b1e3GvN1ho\"\n  ]\n}"
                    },
                    {
                        "title": "List addresses in specified account",
                        "curl": "curl -d'{\"method\": \"address_list\", \"params\": {\"account_id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet address list --account_id=\"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"address_list\", \"params\": {\"account_id\": \"mhDFwjypfcWake48LfTCuJhc5bKMJLpVvB\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    \"mvwqqZrxQrPsJaBFLbTKgY1AJEGT4rnbsD\",\n    \"mqTmZM5pRxjq4NrfUb2Mcu7uQJARbsVt9f\",\n    \"mmCaKwj1vziBChTDYaXrC35jrFiMSGB1Mx\",\n    \"mjJxrDE3Wt4j9v43EMJEX99XEkLEgLTWjh\",\n    \"mtb4b8Yv56zT5fe1vfHHeLf1aah84ZYRZk\",\n    \"mvwj1crj6fvnSF1TmHQ8oBBcLFYVQvw9pN\",\n    \"n3Mgh9yu5x18TvKLraHcn9aat83LqPHbAN\",\n    \"myTBkGpVk8Wbyg1LRp8pw58ScSjY47ftNT\",\n    \"mh1tNuT5FmHQ7aU97nmW5KJ7xNude5XAv6\",\n    \"mxkHjdQg7CN4jrQfVYonvyNC1AB3VmoH5P\",\n    \"mwChpQjWbQPrsrPB3eNqAUZRyM3Rj8UtGp\",\n    \"n1zpHU7pYXAtkSd8mPhozdgnKyFThiuam3\",\n    \"mpNvMpyUMqhoR4bTk3YK1CstB58cwacffG\",\n    \"msxE3wXHvYjwmGXtNYZzjQGd4sAoKuuCnj\",\n    \"n29Pgfu8LuZKA1m2XWNYJrm2UMGbhnyZ5W\",\n    \"miBmBvRPMFJcV8ojLbaLX2i2HuZHr1ELKp\",\n    \"n3Z2Rqhb8Amv9hnMRKpoWCeDB799Gc74kj\",\n    \"n3NHngAEZZ281sJNZ1viDek48G9sBhaidT\",\n    \"myEeoD166ZWmUbSZ7oWtdFGRxaZyiMGCiP\",\n    \"mwRaG2iDvqmPNTKhKP76ofvycWZoH4inN1\",\n    \"mpc68vNDe4zi558iyt4vPvoHixDVtgxHj1\",\n    \"mt2ii95pM4P7G8MUAB7usLP8zLsYyPHVk8\",\n    \"muyLFYW9FMsnqGHwUL4Y58jbUnduQkqd5a\",\n    \"mkkLV3379AM15f8ZWQEQxjXMpn6ne134TE\",\n    \"mfqxZzekYyVg4MExnN44uLZr9n6jBukjNY\",\n    \"mfuXXWuGsCDkVUqGoPLV1fZ5FU8zSyciV2\"\n  ]\n}"
                    }
                ]
            },
            {
                "name": "address_unused",
                "description": "Return an address containing no balance, will create\na new address if there is none.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    }
                ],
                "returns": "            \"an address in base58\"",
                "examples": [
                    {
                        "title": "Get an unused address",
                        "curl": "curl -d'{\"method\": \"address_unused\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet address unused",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"address_unused\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\"\n}"
                    }
                ]
            }
        ]
    },
    "blob": {
        "doc": "Blob management.",
        "commands": [
            {
                "name": "blob_announce",
                "description": "Announce blobs to the DHT",
                "arguments": [
                    {
                        "name": "blob_hash",
                        "type": "str",
                        "description": "announce a blob, specified by blob_hash",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "announce all blobs associated with stream_hash",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "announce all blobs associated with sd_hash and the sd_hash itself",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if successful",
                "examples": []
            },
            {
                "name": "blob_delete",
                "description": "Delete a blob",
                "arguments": [
                    {
                        "name": "blob_hash",
                        "type": "str",
                        "description": "blob hash of the blob to delete",
                        "is_required": true
                    }
                ],
                "returns": "(str) Success/fail message",
                "examples": [
                    {
                        "title": "Delete a blob",
                        "curl": "curl -d'{\"method\": \"blob_delete\", \"params\": {\"blob_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet blob delete a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"blob_delete\", \"params\": {\"blob_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"Deleted a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\"\n}"
                    }
                ]
            },
            {
                "name": "blob_get",
                "description": "Download and return a blob",
                "arguments": [
                    {
                        "name": "blob_hash",
                        "type": "str",
                        "description": "blob hash of the blob to get",
                        "is_required": true
                    },
                    {
                        "name": "timeout",
                        "type": "int",
                        "description": "timeout in number of seconds",
                        "is_required": false
                    }
                ],
                "returns": "(str) Success/Fail message or (dict) decoded data",
                "examples": []
            },
            {
                "name": "blob_list",
                "description": "Returns blob hashes. If not given filters, returns all blobs known by the blob manager",
                "arguments": [
                    {
                        "name": "needed",
                        "type": "bool",
                        "description": "only return needed blobs",
                        "is_required": false
                    },
                    {
                        "name": "finished",
                        "type": "bool",
                        "description": "only return finished blobs",
                        "is_required": false
                    },
                    {
                        "name": "uri",
                        "type": "str",
                        "description": "filter blobs by stream in a uri",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "filter blobs by stream hash",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "filter blobs by sd hash",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "results page size",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page of results to return",
                        "is_required": false
                    }
                ],
                "returns": "(list) List of blob hashes",
                "examples": [
                    {
                        "title": "List your local blobs",
                        "curl": "curl -d'{\"method\": \"blob_list\", \"params\": {\"needed\": false, \"finished\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet blob list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"blob_list\", \"params\": {\"needed\": false, \"finished\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n    \"e7d65f3d04d139b44959ea980e36b21a76873e5dc6482c13012646e664513e1a6fecb1df22e74e61289c67c647171356\",\n    \"e09cdf12ee46f82ea9b22d67c315cce59be725cdadd409c4637d345ec5dbde159012719541390abe74a5c1df5c9085e6\",\n    \"43d2c339ceaeff2dcf08f522f6fcf69471e1c6379c0c4eb8cda961e2939336a571f0c2cd4bf041a4b73be3995b55c5ee\"\n  ]\n}"
                    }
                ]
            },
            {
                "name": "blob_reflect",
                "description": "Reflects specified blobs",
                "arguments": [
                    {
                        "name": "reflector_server",
                        "type": "str",
                        "description": "reflector address",
                        "is_required": false
                    }
                ],
                "returns": "(list) reflected blob hashes",
                "examples": []
            },
            {
                "name": "blob_reflect_all",
                "description": "Reflects all saved blobs",
                "arguments": [],
                "returns": "(bool) true if successful",
                "examples": []
            }
        ]
    },
    "channel": {
        "doc": "Create, update, abandon and list your channel claims.",
        "commands": [
            {
                "name": "channel_abandon",
                "description": "Abandon one of my channel claims.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "txid of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "nout of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until abandon is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Abandon a channel claim",
                        "curl": "curl -d'{\"method\": \"channel_abandon\", \"params\": {\"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel abandon cc242d221f78975c8011132882ee445b7d9b85cf",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_abandon\", \"params\": {\"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001774ef780f69060a79f87351e45aabb64f8a625dd76719ca1e5ad18d938950bc8000000006b4830450221009c6a9b91d142c9bd226aa99a611ceca754b70f508d5d50e384e7f1156f675717022060ad22efd0b40ce972f1b1f6a19c6a284ffc3c70835b6fff03d597edff122d2a012102c8a246a5c6ad5cbbdc09c81397c3c4a833e85c569e4cd4698c873fbcdba80754ffffffff0134b7f505000000001976a9142c497ade76734a21d2e4191044a5649be92a457c88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 8,\n        \"height\": 210,\n        \"is_change\": false,\n        \"is_mine\": true,\n        \"name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"@channel#cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"txid\": \"c80b9538d918ade5a19c7176dd25a6f864bbaa451e35879fa76090f680f74e77\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n          \"title\": \"New Channel\"\n        },\n        \"value_type\": \"channel\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mjZ83yJJcNyft8kRd6NKSZUghFfePspvxU\",\n        \"amount\": \"0.999893\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"txid\": \"ab057975078bab66a8aecaef82cd022a1f59c0d1c2fb81b085eca024be62d746\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000107\",\n    \"total_input\": \"1.0\",\n    \"total_output\": \"0.999893\",\n    \"txid\": \"ab057975078bab66a8aecaef82cd022a1f59c0d1c2fb81b085eca024be62d746\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "channel_create",
                "description": "Create a new channel by generating a channel private key and establishing an '@' prefixed claim.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "name of the channel prefixed with '@'",
                        "is_required": true
                    },
                    {
                        "name": "allow_duplicate_name",
                        "type": "bool",
                        "description": "create new channel even if one already exists with given name. default: false.",
                        "is_required": false
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": true
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "featured",
                        "type": "list",
                        "description": "claim_ids of featured content in channel",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "content tags",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations of the channel, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "email",
                        "type": "str",
                        "description": "email of channel owner",
                        "is_required": false
                    },
                    {
                        "name": "website_url",
                        "type": "str",
                        "description": "website url",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "cover_url",
                        "type": "str",
                        "description": "url of cover image",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to store channel",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the channel is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Create a channel claim without metadata",
                        "curl": "curl -d'{\"method\": \"channel_create\", \"params\": {\"name\": \"@channel\", \"bid\": \"1.0\", \"featured\": [], \"tags\": [], \"languages\": [], \"locations\": [], \"preview\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel create @channel 1.0",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_create\", \"params\": {\"name\": \"@channel\", \"bid\": \"1.0\", \"featured\": [], \"tags\": [], \"languages\": [], \"locations\": [], \"preview\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000011e34589b576524e2b251d1aef0bc9bffe6b09dc56bccb235dd14a8aacc7a0754010000006b48304502210096d195d46f432e15cf9407382c017e61581c62d12d9a6d7885f5fa2fddc2f5b1022004b05c768b55e91c0d192af8304e520c4ef5fc01243056d915f1b1e8a57b78e901210345c3879495bf78c69c37ab70132b02814887288fbe73bb8bad53c7eab3c8ea63ffffffff0200e1f5050000000084b508406368616e6e656c4c5d00125a0a583056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface61196d7576a91445ffef5669ef4c0b24960544e5b345408ec824f588acc462a029000000001976a9140a5da2e4a1f3ca9339fa6b9220cf7e7d286c5f5288ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mg2rpNzx5bSBdqV1CADR98pRjtG8USWWUL\",\n        \"amount\": \"7.999876\",\n        \"confirmations\": 2,\n        \"height\": 207,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 1,\n        \"txid\": \"54077accaaa814dd35b2cc6bc59db0e6ff9bbcf0aed151b2e22465579b58341e\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"@channel#cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"txid\": \"3f4cef7bf01622c5c489ae4e8f6342f408903e17cfe0b62b8e2d9bfae86faa8d\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\"\n        },\n        \"value_type\": \"channel\"\n      },\n      {\n        \"address\": \"mgTmDwGvzP8dVkJz5kLf1PXGvW4X3Vi3a2\",\n        \"amount\": \"6.983769\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"txid\": \"3f4cef7bf01622c5c489ae4e8f6342f408903e17cfe0b62b8e2d9bfae86faa8d\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.016107\",\n    \"total_input\": \"7.999876\",\n    \"total_output\": \"7.983769\",\n    \"txid\": \"3f4cef7bf01622c5c489ae4e8f6342f408903e17cfe0b62b8e2d9bfae86faa8d\"\n  }\n}"
                    },
                    {
                        "title": "Create a channel claim with all metadata",
                        "curl": "curl -d'{\"method\": \"channel_create\", \"params\": {\"name\": \"@bigchannel\", \"bid\": \"1.0\", \"title\": \"Big Channel\", \"description\": \"A channel with lots of videos.\", \"email\": \"creator@smallmedia.com\", \"featured\": [], \"tags\": [\"music\", \"art\"], \"languages\": [\"pt-BR\", \"uk\"], \"locations\": [\"BR\", \"UA::Kiyv\"], \"website_url\": \"http://smallmedia.com\", \"thumbnail_url\": \"http://smallmedia.com/logo.jpg\", \"cover_url\": \"http://smallmedia.com/logo.jpg\", \"preview\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel create @bigchannel 1.0 --title=\"Big Channel\" --description=\"A channel with lots of videos.\" --email=\"creator@smallmedia.com\" --tags=music --tags=art --languages=pt-BR --languages=uk --locations=BR --locations=UA::Kiyv --website_url=\"http://smallmedia.com\" --thumbnail_url=\"http://smallmedia.com/logo.jpg\" --cover_url=\"http://smallmedia.com/logo.jpg\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_create\", \"params\": {\"name\": \"@bigchannel\", \"bid\": \"1.0\", \"title\": \"Big Channel\", \"description\": \"A channel with lots of videos.\", \"email\": \"creator@smallmedia.com\", \"featured\": [], \"tags\": [\"music\", \"art\"], \"languages\": [\"pt-BR\", \"uk\"], \"locations\": [\"BR\", \"UA::Kiyv\"], \"website_url\": \"http://smallmedia.com\", \"thumbnail_url\": \"http://smallmedia.com/logo.jpg\", \"cover_url\": \"http://smallmedia.com/logo.jpg\", \"preview\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001774ef780f69060a79f87351e45aabb64f8a625dd76719ca1e5ad18d938950bc8010000006b483045022100b3a9686f4f612ea691cb8850ddb3cc6c2b2f36d9b411ad4dfb0fc5e1b0a76b8c022023043747f9484052076e83a03cf5c10875bb18e035bb7fd61dbfd298262d91c7012103b0126d336c930ac4ff55a29fe0b24a9bca8b8abfa80c08fe998085bcdd04d08cffffffff0200e1f50500000000fd5001b50b406269676368616e6e656c4d25010012ab010a583056301006072a8648ce3d020106052b8104000a0342000469f71f2fe4e72111f0a743a799d1aacdb385aa9eb72d5e052c3b6e719a03e9c8507e74b162e39cd89c398cc023b9e12371fca741bac00bd8b5558db620fc5f24121663726561746f7240736d616c6c6d656469612e636f6d1a15687474703a2f2f736d616c6c6d656469612e636f6d22202a1e687474703a2f2f736d616c6c6d656469612e636f6d2f6c6f676f2e6a7067420b426967204368616e6e656c4a1e41206368616e6e656c2077697468206c6f7473206f6620766964656f732e52202a1e687474703a2f2f736d616c6c6d656469612e636f6d2f6c6f676f2e6a70675a056d757369635a0361727462050883011820620308ab016a0208206a0908e9011a044b6979766d7576a9142a6239574e39be4cb366a1c3f7e18bbe7efdc9a588ace221d305000000001976a914242c749c579ccaada560e0f3d4bfc447ae3f26c988ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mmQY6H5ZrVJgHHAWKQtmZB2nj4YAwq7SWz\",\n        \"amount\": \"1.9993355\",\n        \"confirmations\": 1,\n        \"height\": 210,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 1,\n        \"txid\": \"c80b9538d918ade5a19c7176dd25a6f864bbaa451e35879fa76090f680f74e77\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mjP4LqHLgiZh9Yt85dPKoEQfyXZWYvW26o\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"f59a5a51dacbc14ca6858271f1d6da918071473c\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"name\": \"@bigchannel\",\n        \"nout\": 0,\n        \"permanent_url\": \"@bigchannel#f59a5a51dacbc14ca6858271f1d6da918071473c\",\n        \"txid\": \"02988e06db8b452191fc25cc12301896f64751bc8fb7a0345130b2c0e1680231\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"cover\": {\n            \"url\": \"http://smallmedia.com/logo.jpg\"\n          },\n          \"description\": \"A channel with lots of videos.\",\n          \"email\": \"creator@smallmedia.com\",\n          \"languages\": [\n            \"pt-BR\",\n            \"uk\"\n          ],\n          \"locations\": [\n            {\n              \"country\": \"BR\"\n            },\n            {\n              \"city\": \"Kiyv\",\n              \"country\": \"UA\"\n            }\n          ],\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a0342000469f71f2fe4e72111f0a743a799d1aacdb385aa9eb72d5e052c3b6e719a03e9c8507e74b162e39cd89c398cc023b9e12371fca741bac00bd8b5558db620fc5f24\",\n          \"tags\": [\n            \"music\",\n            \"art\"\n          ],\n          \"thumbnail\": {\n            \"url\": \"http://smallmedia.com/logo.jpg\"\n          },\n          \"title\": \"Big Channel\",\n          \"website_url\": \"http://smallmedia.com\"\n        },\n        \"value_type\": \"channel\"\n      },\n      {\n        \"address\": \"mipDsnN5CyVPiXcD4WNB3swqCCmzM8w44w\",\n        \"amount\": \"0.9772285\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"txid\": \"02988e06db8b452191fc25cc12301896f64751bc8fb7a0345130b2c0e1680231\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.022107\",\n    \"total_input\": \"1.9993355\",\n    \"total_output\": \"1.9772285\",\n    \"txid\": \"02988e06db8b452191fc25cc12301896f64751bc8fb7a0345130b2c0e1680231\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "channel_export",
                "description": "Export serialized channel signing information for a given certificate claim id",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "Claim ID to export information about",
                        "is_required": true
                    }
                ],
                "returns": "(str) Serialized certificate information",
                "examples": []
            },
            {
                "name": "channel_import",
                "description": "Import serialized channel signing information (to allow signing new claims to the channel)",
                "arguments": [
                    {
                        "name": "serialized_certificate_info",
                        "type": "str",
                        "description": "certificate info",
                        "is_required": true
                    }
                ],
                "returns": "(dict) Result dictionary",
                "examples": []
            },
            {
                "name": "channel_list",
                "description": "List my channel claims.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List your channel claims",
                        "curl": "curl -d'{\"method\": \"channel_list\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_list\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    {\n      \"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n      \"amount\": \"1.0\",\n      \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n      \"claim_op\": \"create\",\n      \"confirmations\": 1,\n      \"height\": 209,\n      \"is_change\": false,\n      \"is_mine\": true,\n      \"name\": \"@channel\",\n      \"nout\": 0,\n      \"permanent_url\": \"@channel#cc242d221f78975c8011132882ee445b7d9b85cf\",\n      \"txid\": \"3f4cef7bf01622c5c489ae4e8f6342f408903e17cfe0b62b8e2d9bfae86faa8d\",\n      \"type\": \"claim\",\n      \"value\": {\n        \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\"\n      },\n      \"value_type\": \"channel\"\n    }\n  ]\n}"
                    },
                    {
                        "title": "Paginate your channel claims",
                        "curl": "curl -d'{\"method\": \"channel_list\", \"params\": {\"page\": 1, \"page_size\": 20}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel list --page=1 --page_size=20",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_list\", \"params\": {\"page\": 1, \"page_size\": 20}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"claim_op\": \"create\",\n        \"confirmations\": 1,\n        \"height\": 209,\n        \"is_change\": false,\n        \"is_mine\": true,\n        \"name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"@channel#cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"txid\": \"3f4cef7bf01622c5c489ae4e8f6342f408903e17cfe0b62b8e2d9bfae86faa8d\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\"\n        },\n        \"value_type\": \"channel\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "channel_update",
                "description": "Update an existing channel claim.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the channel to update",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "clear_featured",
                        "type": "bool",
                        "description": "clear existing featured content (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "featured",
                        "type": "list",
                        "description": "claim_ids of featured content in channel",
                        "is_required": false
                    },
                    {
                        "name": "clear_tags",
                        "type": "bool",
                        "description": "clear existing tags (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "add content tags",
                        "is_required": false
                    },
                    {
                        "name": "clear_languages",
                        "type": "bool",
                        "description": "clear existing languages (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "clear_locations",
                        "type": "bool",
                        "description": "clear existing locations (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations of the channel, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "email",
                        "type": "str",
                        "description": "email of channel owner",
                        "is_required": false
                    },
                    {
                        "name": "website_url",
                        "type": "str",
                        "description": "website url",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "cover_url",
                        "type": "str",
                        "description": "url of cover image",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to store channel",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the channel is sent",
                        "is_required": false
                    },
                    {
                        "name": "new_signing_key",
                        "type": "bool",
                        "description": "generate a new signing key, will invalidate all previous publishes",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Update a channel claim",
                        "curl": "curl -d'{\"method\": \"channel_update\", \"params\": {\"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"title\": \"New Channel\", \"featured\": [], \"clear_featured\": false, \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"new_signing_key\": false, \"preview\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel update cc242d221f78975c8011132882ee445b7d9b85cf --title=\"New Channel\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_update\", \"params\": {\"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"title\": \"New Channel\", \"featured\": [], \"clear_featured\": false, \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"new_signing_key\": false, \"preview\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000028daa6fe8fa9b2d8e2bb6e0cf173e9008f442638f4eae89c4c52216f07bef4c3f000000006a4730440220474b8f26edfa30227a371649f5e84281b8415fd93efb732ad62b3a8926847f7802200532015915560e9d38e54066cdefa2e96e4a979d23eecf543b536e57cde5f16a012102c8a246a5c6ad5cbbdc09c81397c3c4a833e85c569e4cd4698c873fbcdba80754ffffffffeb946c9db0d8cbb09c8fa25b52f7e33539837010c7029ad478c65a9f777db54b000000006a473044022046a8d75ae6750844e818d454dca8f5e4cbbd98784ecadec36f3811e0867add1f02206221a9c7e3bbe37c103c3732160e72987b52d8c275cf7d7bc1c3ead3b18387680121020d84aaf3307820862e274b5a1f960d3f162fa629aaf48f57e43d9449b9b2590effffffff0200e1f50500000000a6b708406368616e6e656c14cf859b7d5b44ee82281311805c97781f222d24cc4c6a00125a0a583056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119420b4e6577204368616e6e656c6d6d76a91445ffef5669ef4c0b24960544e5b345408ec824f588ac6ebeea0b000000001976a914409a0e2548c192053f575b43ea7a9e3213563e9d88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"claim_op\": \"create\",\n        \"confirmations\": 1,\n        \"height\": 209,\n        \"is_change\": false,\n        \"is_mine\": true,\n        \"name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"@channel#cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"txid\": \"3f4cef7bf01622c5c489ae4e8f6342f408903e17cfe0b62b8e2d9bfae86faa8d\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\"\n        },\n        \"value_type\": \"channel\"\n      },\n      {\n        \"address\": \"mnBjVptRpCyzSdVFR8uwqNkmDpScxHHYG9\",\n        \"amount\": \"1.999604\",\n        \"confirmations\": 1,\n        \"height\": 209,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 0,\n        \"txid\": \"4bb57d779f5ac678d49a02c71070833935e3f7525ba28f9cb0cbd8b09d6c94eb\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"claim_op\": \"update\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"@channel#cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"txid\": \"c80b9538d918ade5a19c7176dd25a6f864bbaa451e35879fa76090f680f74e77\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n          \"title\": \"New Channel\"\n        },\n        \"value_type\": \"channel\"\n      },\n      {\n        \"address\": \"mmQY6H5ZrVJgHHAWKQtmZB2nj4YAwq7SWz\",\n        \"amount\": \"1.9993355\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"txid\": \"c80b9538d918ade5a19c7176dd25a6f864bbaa451e35879fa76090f680f74e77\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.0002685\",\n    \"total_input\": \"2.999604\",\n    \"total_output\": \"2.9993355\",\n    \"txid\": \"c80b9538d918ade5a19c7176dd25a6f864bbaa451e35879fa76090f680f74e77\"\n  }\n}"
                    }
                ]
            }
        ]
    },
    "claim": {
        "doc": "List and search all types of claims.",
        "commands": [
            {
                "name": "claim_list",
                "description": "List my stream and channel claims.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List all your claims",
                        "curl": "curl -d'{\"method\": \"claim_list\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet claim list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"claim_list\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    {\n      \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n      \"amount\": \"1.0\",\n      \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n      \"claim_op\": \"update\",\n      \"confirmations\": 1,\n      \"height\": 214,\n      \"is_change\": false,\n      \"is_channel_signature_valid\": true,\n      \"is_mine\": true,\n      \"name\": \"astream\",\n      \"nout\": 0,\n      \"permanent_url\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n      \"signing_channel\": {\n        \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"name\": \"@channel\",\n        \"value\": {\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n          \"title\": \"New Channel\"\n        }\n      },\n      \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n      \"type\": \"claim\",\n      \"value\": {\n        \"source\": {\n          \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n          \"media_type\": \"application/octet-stream\",\n          \"name\": \"tmpit97x87b\",\n          \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n          \"size\": \"11\"\n        }\n      },\n      \"value_type\": \"stream\"\n    },\n    {\n      \"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n      \"amount\": \"1.0\",\n      \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n      \"claim_op\": \"update\",\n      \"confirmations\": 5,\n      \"height\": 210,\n      \"is_change\": false,\n      \"is_mine\": true,\n      \"name\": \"@channel\",\n      \"nout\": 0,\n      \"permanent_url\": \"@channel#cc242d221f78975c8011132882ee445b7d9b85cf\",\n      \"txid\": \"c80b9538d918ade5a19c7176dd25a6f864bbaa451e35879fa76090f680f74e77\",\n      \"type\": \"claim\",\n      \"value\": {\n        \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n        \"title\": \"New Channel\"\n      },\n      \"value_type\": \"channel\"\n    }\n  ]\n}"
                    },
                    {
                        "title": "Paginate your claims",
                        "curl": "curl -d'{\"method\": \"claim_list\", \"params\": {\"page\": 1, \"page_size\": 20}}' http://localhost:5279/",
                        "lbrynet": "lbrynet claim list --page=1 --page_size=20",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"claim_list\", \"params\": {\"page\": 1, \"page_size\": 20}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 1,\n        \"height\": 214,\n        \"is_change\": false,\n        \"is_channel_signature_valid\": true,\n        \"is_mine\": true,\n        \"name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"signing_channel\": {\n          \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n          \"name\": \"@channel\",\n          \"value\": {\n            \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n            \"title\": \"New Channel\"\n          }\n        },\n        \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpit97x87b\",\n            \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n            \"size\": \"11\"\n          }\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"mmu5Wxcx5pxSWi11kVSNR3VJjEqenqfr6N\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 5,\n        \"height\": 210,\n        \"is_change\": false,\n        \"is_mine\": true,\n        \"name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"@channel#cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"txid\": \"c80b9538d918ade5a19c7176dd25a6f864bbaa451e35879fa76090f680f74e77\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n          \"title\": \"New Channel\"\n        },\n        \"value_type\": \"channel\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "claim_search",
                "description": "Search for stream and channel claims on the blockchain.\n\nUse --channel_id=<channel_id> to list all stream claims in a channel.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "find claims with this name",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "find a claim with this claim_id",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "find a claim with this txid:nout",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "str",
                        "description": "find a claim with this txid:nout",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "limit search to specific channel claim id (returns stream claims)",
                        "is_required": false
                    },
                    {
                        "name": "winning",
                        "type": "bool",
                        "description": "limit to winning claims",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "Search for all claims in channel",
                        "curl": "curl -d'{\"method\": \"claim_search\", \"params\": {\"channel_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"winning\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet claim search --channel_id=\"cc242d221f78975c8011132882ee445b7d9b85cf\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"claim_search\", \"params\": {\"channel_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"winning\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"absolute_channel_position\": 0,\n        \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n        \"amount\": \"1.0\",\n        \"channel_name\": \"@channel\",\n        \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"claim_sequence\": -1,\n        \"decoded_claim\": true,\n        \"depth\": 1,\n        \"effective_amount\": \"1.0\",\n        \"has_signature\": true,\n        \"height\": 214,\n        \"is_channel_signature_valid\": true,\n        \"name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"protobuf\": \"01cf859b7d5b44ee82281311805c97781f222d24cce145c0ad7c3c76cd83b5f8044d097413f4198e39a8b4d8012e4055de83212fb94c12834f444142c49a9f46a786b31236b79c7612bdfccae897ef372792b9894e0a7f0a7d0a20b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9120b746d706974393778383762180b22186170706c69636174696f6e2f6f637465742d73747265616d3230a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n        \"signature_is_valid\": true,\n        \"signing_channel\": {\n          \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n          \"name\": \"@channel\",\n          \"value\": {\n            \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n            \"title\": \"New Channel\"\n          }\n        },\n        \"supports\": [],\n        \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n        \"valid_at_height\": 214,\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpit97x87b\",\n            \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n            \"size\": \"11\"\n          }\n        }\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 10,\n    \"total_pages\": 1\n  }\n}"
                    },
                    {
                        "title": "Search for claims matching a name",
                        "curl": "curl -d'{\"method\": \"claim_search\", \"params\": {\"name\": \"astream\", \"winning\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet claim search --name=\"astream\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"claim_search\", \"params\": {\"name\": \"astream\", \"winning\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n        \"amount\": \"1.0\",\n        \"channel_name\": \"@channel\",\n        \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"claim_sequence\": -1,\n        \"decoded_claim\": true,\n        \"depth\": 1,\n        \"effective_amount\": \"1.0\",\n        \"has_signature\": true,\n        \"height\": 214,\n        \"is_channel_signature_valid\": true,\n        \"name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"protobuf\": \"01cf859b7d5b44ee82281311805c97781f222d24cce145c0ad7c3c76cd83b5f8044d097413f4198e39a8b4d8012e4055de83212fb94c12834f444142c49a9f46a786b31236b79c7612bdfccae897ef372792b9894e0a7f0a7d0a20b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9120b746d706974393778383762180b22186170706c69636174696f6e2f6f637465742d73747265616d3230a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n        \"signature_is_valid\": true,\n        \"signing_channel\": {\n          \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n          \"name\": \"@channel\",\n          \"value\": {\n            \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n            \"title\": \"New Channel\"\n          }\n        },\n        \"supports\": [],\n        \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n        \"valid_at_height\": 214,\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpit97x87b\",\n            \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n            \"size\": \"11\"\n          }\n        }\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 1,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            }
        ]
    },
    "comment": {
        "doc": "Create and list comments.",
        "commands": [
            {
                "name": "comment_create",
                "description": "Create and associate a comment with a claim using your channel identity.",
                "arguments": [
                    {
                        "name": "parent_comment_id",
                        "type": "int",
                        "description": "The ID of a comment to make a response to",
                        "is_required": false
                    }
                ],
                "returns": "(dict) Comment object if successfully made",
                "examples": []
            },
            {
                "name": "comment_list",
                "description": "List comments associated with a claim.",
                "arguments": [
                    {
                        "name": "flat",
                        "type": "bool",
                        "description": "Flag to indicate whether or not you want the replies to be flattened along with the rest of the comments attached to the claim. Off by default",
                        "is_required": false
                    },
                    {
                        "name": "parent_comment_id",
                        "type": "int",
                        "description": "The ID of an existing comment to list replies from",
                        "is_required": false
                    },
                    {
                        "name": "max_replies_shown",
                        "type": "int",
                        "description": "For every comment that we pull replies from, only retrieve up to this amount. Note: This is not the same as page size.",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "The page you'd like to see in the comment list. The first page is 1, second page is 2, and so on.",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "The amount of comments that you'd like to retrieve in one request",
                        "is_required": false
                    }
                ],
                "returns": "(dict)  Dict containing the following schema:\n    {\n        \"page\":  (int) The page of comments as provided when limiting response to page_size.\n        \"page_size\":  (int) Number of comments in the given page. -1 if page_size wasn't used\n        \"comments\":  (list) Contains all the comments (as dicts) as provided by the specified parameters\n    }",
                "examples": []
            }
        ]
    },
    "file": {
        "doc": "File management.",
        "commands": [
            {
                "name": "file_delete",
                "description": "Delete a LBRY file",
                "arguments": [
                    {
                        "name": "delete_from_download_dir",
                        "type": "bool",
                        "description": "delete file from download directory, instead of just deleting blobs",
                        "is_required": false
                    },
                    {
                        "name": "delete_all",
                        "type": "bool",
                        "description": "if there are multiple matching files, allow the deletion of multiple files. Otherwise do not delete anything.",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "delete by file sd hash",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "delete by file name in downloads folder",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "delete by file stream hash",
                        "is_required": false
                    },
                    {
                        "name": "rowid",
                        "type": "int",
                        "description": "delete by file row id",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "delete by file claim id",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "delete by file claim txid",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "delete by file claim nout",
                        "is_required": false
                    },
                    {
                        "name": "claim_name",
                        "type": "str",
                        "description": "delete by file claim name",
                        "is_required": false
                    },
                    {
                        "name": "channel_claim_id",
                        "type": "str",
                        "description": "delete by file channel claim id",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "delete by file channel claim name",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if deletion was successful",
                "examples": [
                    {
                        "title": "Delete a file",
                        "curl": "curl -d'{\"method\": \"file_delete\", \"params\": {\"delete_from_download_dir\": false, \"delete_all\": false, \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet file delete --claim_id=\"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"file_delete\", \"params\": {\"delete_from_download_dir\": false, \"delete_all\": false, \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": true\n}"
                    }
                ]
            },
            {
                "name": "file_list",
                "description": "List files limited by optional filters",
                "arguments": [
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "get file with matching sd hash",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "get file with matching file name in the downloads folder",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "get file with matching stream hash",
                        "is_required": false
                    },
                    {
                        "name": "rowid",
                        "type": "int",
                        "description": "get file with matching row id",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "get file with matching claim id",
                        "is_required": false
                    },
                    {
                        "name": "outpoint",
                        "type": "str",
                        "description": "get file with matching claim outpoint",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "get file with matching claim txid",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "get file with matching claim nout",
                        "is_required": false
                    },
                    {
                        "name": "channel_claim_id",
                        "type": "str",
                        "description": "get file with matching channel claim id",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "get file with matching channel name",
                        "is_required": false
                    },
                    {
                        "name": "claim_name",
                        "type": "str",
                        "description": "get file with matching claim name",
                        "is_required": false
                    },
                    {
                        "name": "blobs_in_stream<blobs_in_stream>",
                        "type": "int",
                        "description": "get file with matching blobs in stream",
                        "is_required": false
                    },
                    {
                        "name": "blobs_remaining",
                        "type": "int",
                        "description": "amount of remaining blobs to download",
                        "is_required": false
                    },
                    {
                        "name": "sort",
                        "type": "str",
                        "description": "field to sort by (one of the above filter fields)",
                        "is_required": false
                    },
                    {
                        "name": "comparison",
                        "type": "str",
                        "description": "logical comparision, (eq | ne | g | ge | l | le)",
                        "is_required": false
                    }
                ],
                "returns": "            [\n                {\n                    \"completed\": \"(bool) true if download is completed\",\n                    \"file_name\": \"(str) name of file\",\n                    \"download_directory\": \"(str) download directory\",\n                    \"points_paid\": \"(float) credit paid to download file\",\n                    \"stopped\": \"(bool) true if download is stopped\",\n                    \"stream_hash\": \"(str) stream hash of file\",\n                    \"stream_name\": \"(str) stream name\",\n                    \"suggested_file_name\": \"(str) suggested file name\",\n                    \"sd_hash\": \"(str) sd hash of file\",\n                    \"download_path\": \"(str) download path of file\",\n                    \"mime_type\": \"(str) mime type of file\",\n                    \"key\": \"(str) key attached to file\",\n                    \"total_bytes_lower_bound\": \"(int) lower bound file size in bytes\",\n                    \"total_bytes\": \"(int) file upper bound size in bytes\",\n                    \"written_bytes\": \"(int) written size in bytes\",\n                    \"blobs_completed\": \"(int) number of fully downloaded blobs\",\n                    \"blobs_in_stream\": \"(int) total blobs on stream\",\n                    \"blobs_remaining\": \"(int) total blobs remaining to download\",\n                    \"status\": \"(str) downloader status\",\n                    \"claim_id\": \"(str) None if claim is not found else the claim id\",\n                    \"txid\": \"(str) None if claim is not found else the transaction id\",\n                    \"nout\": \"(int) None if claim is not found else the transaction output index\",\n                    \"outpoint\": \"(str) None if claim is not found else the tx and output\",\n                    \"metadata\": \"(dict) None if claim is not found else the claim metadata\",\n                    \"channel_claim_id\": \"(str) None if claim is not found or not signed\",\n                    \"channel_name\": \"(str) None if claim is not found or not signed\",\n                    \"claim_name\": \"(str) None if claim is not found else the claim name\"\n                }\n            ]",
                "examples": [
                    {
                        "title": "List local files",
                        "curl": "curl -d'{\"method\": \"file_list\", \"params\": {\"reverse\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet file list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"file_list\", \"params\": {\"reverse\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    {\n      \"blobs_completed\": 1,\n      \"blobs_in_stream\": 1,\n      \"blobs_remaining\": 0,\n      \"channel_claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n      \"channel_name\": \"@channel\",\n      \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n      \"claim_name\": \"astream\",\n      \"completed\": true,\n      \"download_directory\": \"/tmp\",\n      \"download_path\": null,\n      \"file_name\": \"tmpit97x87b\",\n      \"key\": \"40d70a655061b7981b6d36a84d985fdc\",\n      \"metadata\": {\n        \"source\": {\n          \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n          \"media_type\": \"application/octet-stream\",\n          \"name\": \"tmpit97x87b\",\n          \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n          \"size\": \"11\"\n        }\n      },\n      \"mime_type\": \"application/octet-stream\",\n      \"nout\": 0,\n      \"outpoint\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898:0\",\n      \"points_paid\": 0.0,\n      \"protobuf\": \"01cf859b7d5b44ee82281311805c97781f222d24cce145c0ad7c3c76cd83b5f8044d097413f4198e39a8b4d8012e4055de83212fb94c12834f444142c49a9f46a786b31236b79c7612bdfccae897ef372792b9894e0a7f0a7d0a20b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9120b746d706974393778383762180b22186170706c69636174696f6e2f6f637465742d73747265616d3230a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n      \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n      \"status\": \"finished\",\n      \"stopped\": true,\n      \"stream_hash\": \"5bb823532eb1994bbb6c4a7ac44713249768f6e329e6e58a2c1e128ef9a029f850c30757909d0f961f7143a3b7ea439f\",\n      \"stream_name\": \"tmpit97x87b\",\n      \"suggested_file_name\": \"tmpit97x87b\",\n      \"total_bytes\": 16,\n      \"total_bytes_lower_bound\": 0,\n      \"tx\": null,\n      \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n      \"written_bytes\": null\n    },\n    {\n      \"blobs_completed\": 1,\n      \"blobs_in_stream\": 1,\n      \"blobs_remaining\": 0,\n      \"channel_claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n      \"channel_name\": \"@channel\",\n      \"claim_id\": \"63395891e9172ef41f70197c08a528fd24bed596\",\n      \"claim_name\": \"blank-image\",\n      \"completed\": true,\n      \"download_directory\": \"/tmp\",\n      \"download_path\": null,\n      \"file_name\": \"tmpx0pcyp9a.png\",\n      \"key\": \"041b8782776581110cc00f7dec47fefa\",\n      \"metadata\": {\n        \"author\": \"Picaso\",\n        \"description\": \"A blank PNG that is 5x7.\",\n        \"fee\": {\n          \"address\": \"mv3F3Amp2JPSMUz1BHRLfYFrdgoxUTHh4b\",\n          \"amount\": 0.3,\n          \"currency\": \"LBC\"\n        },\n        \"image\": {\n          \"height\": 7,\n          \"width\": 5\n        },\n        \"languages\": [\n          \"en\"\n        ],\n        \"license\": \"Public Domain\",\n        \"license_url\": \"http://public-domain.org\",\n        \"locations\": [\n          {\n            \"city\": \"Manchester\",\n            \"country\": \"US\",\n            \"state\": \"NH\"\n          }\n        ],\n        \"release_time\": \"1555941592\",\n        \"source\": {\n          \"hash\": \"06003bbee8aece0543ed9d9cecc48be1d996cfeff9837a1aed1d961caeda82af\",\n          \"media_type\": \"image/png\",\n          \"name\": \"tmpx0pcyp9a.png\",\n          \"sd_hash\": \"e09cdf12ee46f82ea9b22d67c315cce59be725cdadd409c4637d345ec5dbde159012719541390abe74a5c1df5c9085e6\",\n          \"size\": \"99\"\n        },\n        \"stream_type\": \"image\",\n        \"tags\": [\n          \"blank\",\n          \"art\"\n        ],\n        \"thumbnail\": {\n          \"url\": \"http://smallmedia.com/thumbnail.jpg\"\n        },\n        \"title\": \"Blank Image\"\n      },\n      \"mime_type\": \"image/png\",\n      \"nout\": 0,\n      \"outpoint\": \"595056aa6d429d732a245ba6033b6ce54fa862a29c3a96da08a22acc4f3495a1:0\",\n      \"points_paid\": 0.0,\n      \"protobuf\": \"01cf859b7d5b44ee82281311805c97781f222d24cc291bbb2c67e9438461d61d7fbb1e8ccd889c432eda03f0ba66909a59ce9c1ac0c375a06a6f9c8a877a973e9cdad15070bca4367f6de301d56932055e782430d90ad5010a720a2006003bbee8aece0543ed9d9cecc48be1d996cfeff9837a1aed1d961caeda82af120f746d7078307063797039612e706e6718632209696d6167652f706e673230e09cdf12ee46f82ea9b22d67c315cce59be725cdadd409c4637d345ec5dbde159012719541390abe74a5c1df5c9085e6120650696361736f1a0d5075626c696320446f6d61696e2218687474703a2f2f7075626c69632d646f6d61696e2e6f726728d891f7e5053222080112196f9f4c376b984270e4ec75c870f0b5faac1b3dd6985c747a30188087a70e520408051007420b426c616e6b20496d6167654a184120626c616e6b20504e472074686174206973203578372e52252a23687474703a2f2f736d616c6c6d656469612e636f6d2f7468756d626e61696c2e6a70675a05626c616e6b5a03617274620208016a1308ec0112024e481a0a4d616e63686573746572\",\n      \"sd_hash\": \"e09cdf12ee46f82ea9b22d67c315cce59be725cdadd409c4637d345ec5dbde159012719541390abe74a5c1df5c9085e6\",\n      \"status\": \"finished\",\n      \"stopped\": true,\n      \"stream_hash\": \"a28303e966169103c2e55f064030b820f7fbc064f42ea2d806876b76a0e28158ed45c043cbd61b566eab0e1e4508c55d\",\n      \"stream_name\": \"tmpx0pcyp9a.png\",\n      \"suggested_file_name\": \"tmpx0pcyp9a.png\",\n      \"total_bytes\": 112,\n      \"total_bytes_lower_bound\": 96,\n      \"tx\": null,\n      \"txid\": \"595056aa6d429d732a245ba6033b6ce54fa862a29c3a96da08a22acc4f3495a1\",\n      \"written_bytes\": null\n    }\n  ]\n}"
                    },
                    {
                        "title": "List files matching a parameter",
                        "curl": "curl -d'{\"method\": \"file_list\", \"params\": {\"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\", \"reverse\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet file list --claim_id=\"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"file_list\", \"params\": {\"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\", \"reverse\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    {\n      \"blobs_completed\": 1,\n      \"blobs_in_stream\": 1,\n      \"blobs_remaining\": 0,\n      \"channel_claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n      \"channel_name\": \"@channel\",\n      \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n      \"claim_name\": \"astream\",\n      \"completed\": true,\n      \"download_directory\": \"/tmp\",\n      \"download_path\": null,\n      \"file_name\": \"tmpit97x87b\",\n      \"key\": \"40d70a655061b7981b6d36a84d985fdc\",\n      \"metadata\": {\n        \"source\": {\n          \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n          \"media_type\": \"application/octet-stream\",\n          \"name\": \"tmpit97x87b\",\n          \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n          \"size\": \"11\"\n        }\n      },\n      \"mime_type\": \"application/octet-stream\",\n      \"nout\": 0,\n      \"outpoint\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898:0\",\n      \"points_paid\": 0.0,\n      \"protobuf\": \"01cf859b7d5b44ee82281311805c97781f222d24cce145c0ad7c3c76cd83b5f8044d097413f4198e39a8b4d8012e4055de83212fb94c12834f444142c49a9f46a786b31236b79c7612bdfccae897ef372792b9894e0a7f0a7d0a20b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9120b746d706974393778383762180b22186170706c69636174696f6e2f6f637465742d73747265616d3230a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n      \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n      \"status\": \"finished\",\n      \"stopped\": true,\n      \"stream_hash\": \"5bb823532eb1994bbb6c4a7ac44713249768f6e329e6e58a2c1e128ef9a029f850c30757909d0f961f7143a3b7ea439f\",\n      \"stream_name\": \"tmpit97x87b\",\n      \"suggested_file_name\": \"tmpit97x87b\",\n      \"total_bytes\": 16,\n      \"total_bytes_lower_bound\": 0,\n      \"tx\": null,\n      \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n      \"written_bytes\": null\n    }\n  ]\n}"
                    }
                ]
            },
            {
                "name": "file_reflect",
                "description": "Reflect all the blobs in a file matching the filter criteria",
                "arguments": [
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "get file with matching sd hash",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "get file with matching file name in the downloads folder",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "get file with matching stream hash",
                        "is_required": false
                    },
                    {
                        "name": "rowid",
                        "type": "int",
                        "description": "get file with matching row id",
                        "is_required": false
                    },
                    {
                        "name": "reflector",
                        "type": "str",
                        "description": "reflector server, ip address or url by default choose a server from the config",
                        "is_required": false
                    }
                ],
                "returns": "(list) list of blobs reflected",
                "examples": []
            },
            {
                "name": "file_set_status",
                "description": "Start or stop downloading a file",
                "arguments": [
                    {
                        "name": "status",
                        "type": "str",
                        "description": "one of \"start\" or \"stop\"",
                        "is_required": true
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "set status of file with matching sd hash",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "set status of file with matching file name in the downloads folder",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "set status of file with matching stream hash",
                        "is_required": false
                    },
                    {
                        "name": "rowid",
                        "type": "int",
                        "description": "set status of file with matching row id",
                        "is_required": false
                    }
                ],
                "returns": "(str) Confirmation message",
                "examples": []
            }
        ]
    },
    "peer": {
        "doc": "DHT / Blob Exchange peer commands.",
        "commands": [
            {
                "name": "peer_list",
                "description": "Get peers for blob hash",
                "arguments": [
                    {
                        "name": "blob_hash",
                        "type": "str",
                        "description": "find available peers for this blob hash",
                        "is_required": true
                    },
                    {
                        "name": "search_bottom_out_limit",
                        "type": "int",
                        "description": "the number of search probes in a row that don't find any new peers before giving up and returning",
                        "is_required": false
                    }
                ],
                "returns": "(list) List of contact dictionaries {'address': <peer ip>, 'udp_port': <dht port>, 'tcp_port': <peer port>,\n     'node_id': <peer node id>}",
                "examples": []
            },
            {
                "name": "peer_ping",
                "description": "Send a kademlia ping to the specified peer. If address and port are provided the peer is directly pinged,\nif not provided the peer is located first.",
                "arguments": [],
                "returns": "(str) pong, or {'error': <error message>} if an error is encountered",
                "examples": []
            }
        ]
    },
    "settings": {
        "doc": "Settings management.",
        "commands": [
            {
                "name": "settings_get",
                "description": "Get daemon settings",
                "arguments": [],
                "returns": "(dict) Dictionary of daemon settings\n    See ADJUSTABLE_SETTINGS in lbrynet/conf.py for full list of settings",
                "examples": [
                    {
                        "title": "Get settings",
                        "curl": "curl -d'{\"method\": \"settings_get\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet settings get",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"settings_get\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"announce_head_and_sd_only\": true,\n    \"api\": \"localhost:5279\",\n    \"blob_download_timeout\": 30.0,\n    \"blockchain_name\": \"lbrycrd_regtest\",\n    \"cache_time\": 150,\n    \"comment_server\": \"http://comments.lbry.com:2903/api\",\n    \"components_to_skip\": [\n      \"dht\",\n      \"upnp\",\n      \"hash_announcer\",\n      \"peer_protocol_server\"\n    ],\n    \"concurrent_blob_announcers\": 10,\n    \"concurrent_reflector_uploads\": 10,\n    \"config\": \"/home/lex/.local/share/lbry/lbrynet/daemon_settings.yml\",\n    \"data_dir\": \"/tmp/tmprlkz78lb\",\n    \"download_dir\": \"/tmp/tmprlkz78lb\",\n    \"download_timeout\": 30.0,\n    \"fixed_peer_delay\": 2.0,\n    \"known_dht_nodes\": [],\n    \"lbryum_servers\": [\n      [\n        \"127.0.0.1\",\n        50001\n      ]\n    ],\n    \"max_connections_per_download\": 8,\n    \"max_key_fee\": {\n      \"amount\": 50.0,\n      \"currency\": \"USD\"\n    },\n    \"network_interface\": \"0.0.0.0\",\n    \"node_rpc_timeout\": 5.0,\n    \"peer_connect_timeout\": 2.0,\n    \"reflect_streams\": true,\n    \"reflector_servers\": [\n      [\n        \"127.0.0.1\",\n        5566\n      ]\n    ],\n    \"s3_headers_depth\": 960,\n    \"share_usage_data\": false,\n    \"split_buckets_under_index\": 1,\n    \"tcp_port\": 3333,\n    \"udp_port\": 4444,\n    \"use_upnp\": false,\n    \"wallet_dir\": \"/tmp/tmprlkz78lb\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "settings_set",
                "description": "Set daemon settings",
                "arguments": [],
                "returns": "(dict) Updated dictionary of daemon settings",
                "examples": []
            }
        ]
    },
    "stream": {
        "doc": "Create, update, abandon, list and inspect your stream claims.",
        "commands": [
            {
                "name": "stream_abandon",
                "description": "Abandon one of my stream claims.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "txid of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "nout of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until abandon is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Abandon a stream claim",
                        "curl": "curl -d'{\"method\": \"stream_abandon\", \"params\": {\"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\", \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream abandon e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_abandon\", \"params\": {\"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\", \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"010000000198b89d19b4e5685b304e7583c9b57087ff6ba60ef8eaadc59bea88755ef22feb000000006a47304402201aeff9426e7c8508da8beb8dd1ebcddeea80019c76fd2b780cfad179b93e3ab20220760c3547cae27826dd671a99592220825d91c419b334889f5fbad9d9b7652754012103480815803999a8661f93bc2ab3c7c31eb09ac4091db1851fd716c848e9123eb1ffffffff0134b7f505000000001976a9146a36a7e81ab9086de0c5aded6fde84fad4c0d09788ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 3,\n        \"height\": 214,\n        \"is_change\": false,\n        \"is_mine\": true,\n        \"name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"signing_channel\": {\n          \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n          \"name\": \"@channel\",\n          \"value\": {\n            \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n            \"title\": \"New Channel\"\n          }\n        },\n        \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpit97x87b\",\n            \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n            \"size\": \"11\"\n          }\n        },\n        \"value_type\": \"stream\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mqCZPwo3NaCVSA8aJQwE6YYghRG6YKoZem\",\n        \"amount\": \"0.999893\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"txid\": \"16533cc68da2df19345be236978786c41b285ff0ccb44e41ff9f976c0f7e263b\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000107\",\n    \"total_input\": \"1.0\",\n    \"total_output\": \"0.999893\",\n    \"txid\": \"16533cc68da2df19345be236978786c41b285ff0ccb44e41ff9f976c0f7e263b\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "stream_cost_estimate",
                "description": "Get estimated cost for a lbry stream",
                "arguments": [
                    {
                        "name": "uri",
                        "type": "str",
                        "description": "uri to use",
                        "is_required": true
                    }
                ],
                "returns": "(float) Estimated cost in lbry credits, returns None if uri is not\n        resolvable",
                "examples": []
            },
            {
                "name": "stream_create",
                "description": "Make a new stream claim and announce the associated file to lbrynet.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "name of the content (can only consist of a-z A-Z 0-9 and -(dash))",
                        "is_required": true
                    },
                    {
                        "name": "allow_duplicate_name",
                        "type": "bool",
                        "description": "create new claim even if one already exists with given name. default: false.",
                        "is_required": false
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": true
                    },
                    {
                        "name": "file_path",
                        "type": "str",
                        "description": "path to file to be associated with name.",
                        "is_required": true
                    },
                    {
                        "name": "fee_currency",
                        "type": "string",
                        "description": "specify fee currency",
                        "is_required": false
                    },
                    {
                        "name": "fee_amount",
                        "type": "decimal",
                        "description": "content download fee",
                        "is_required": false
                    },
                    {
                        "name": "fee_address",
                        "type": "str",
                        "description": "address where to send fee payments, will use value from --claim_address if not provided",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "author",
                        "type": "str",
                        "description": "author of the publication. The usage for this field is not the same as for channels. The author field is used to credit an author who is not the publisher and is not represented by the channel. For example, a pdf file of 'The Odyssey' has an author of 'Homer' but may by published to a channel such as '@classics', or to no channel at all",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "add content tags",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations relevant to the stream, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "license",
                        "type": "str",
                        "description": "publication license",
                        "is_required": false
                    },
                    {
                        "name": "license_url",
                        "type": "str",
                        "description": "publication license url",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "release_time",
                        "type": "int",
                        "description": "original public release of content, seconds since UNIX epoch",
                        "is_required": false
                    },
                    {
                        "name": "width",
                        "type": "int",
                        "description": "image/video width, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "height",
                        "type": "int",
                        "description": "image/video height, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "duration",
                        "type": "int",
                        "description": "audio/video duration in seconds, automatically calculated",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to use for funding the transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the claim is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Create a stream claim without metadata",
                        "curl": "curl -d'{\"method\": \"stream_create\", \"params\": {\"name\": \"astream\", \"bid\": \"1.0\", \"file_path\": \"/tmp/tmpit97x87b\", \"tags\": [], \"languages\": [], \"locations\": [], \"channel_account_id\": [], \"preview\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream create astream 1.0 /tmp/tmpit97x87b",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_create\", \"params\": {\"name\": \"astream\", \"bid\": \"1.0\", \"file_path\": \"/tmp/tmpit97x87b\", \"tags\": [], \"languages\": [], \"locations\": [], \"channel_account_id\": [], \"preview\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000018daa6fe8fa9b2d8e2bb6e0cf173e9008f442638f4eae89c4c52216f07bef4c3f010000006a4730440220322f0be42de2a348dffdac061501a120ad1b9bea997e01178df1bc5e96923d6902201e03f86f72c1f7fd33866bf50939188b1ef55b765125499590ae8946467eeed2012103ef7ff17b5897e6bb9da37754e118ac2d9cda4a53ffa110b1554e413125465d5dffffffff0200e1f50500000000a8b5076173747265616d4c82000a7f0a7d0a20b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9120b746d706974393778383762180b22186170706c69636174696f6e2f6f637465742d73747265616d3230a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc76d7576a914b122754d9d7432f98eec4e87c21b4982c8b9280e88ac38fb9423000000001976a9149da5548b96964cf84f10bd44674c38a0edc2236488ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mgTmDwGvzP8dVkJz5kLf1PXGvW4X3Vi3a2\",\n        \"amount\": \"6.983769\",\n        \"confirmations\": 4,\n        \"height\": 209,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 1,\n        \"txid\": \"3f4cef7bf01622c5c489ae4e8f6342f408903e17cfe0b62b8e2d9bfae86faa8d\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"txid\": \"7c5483e4adc6d351c7d60466db23dca36379e2ec7a48ecd3642a007bedac5724\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpit97x87b\",\n            \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n            \"size\": \"11\"\n          }\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"mutWSX3pmSpGejnTgrMP8s1xCbPkuuzuH5\",\n        \"amount\": \"5.969662\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"txid\": \"7c5483e4adc6d351c7d60466db23dca36379e2ec7a48ecd3642a007bedac5724\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.014107\",\n    \"total_input\": \"6.983769\",\n    \"total_output\": \"6.969662\",\n    \"txid\": \"7c5483e4adc6d351c7d60466db23dca36379e2ec7a48ecd3642a007bedac5724\"\n  }\n}"
                    },
                    {
                        "title": "Create an image stream claim with all metadata and fee",
                        "curl": "curl -d'{\"method\": \"stream_create\", \"params\": {\"name\": \"blank-image\", \"bid\": \"1.0\", \"file_path\": \"/tmp/tmpx0pcyp9a.png\", \"tags\": [\"blank\", \"art\"], \"languages\": [\"en\"], \"locations\": [\"US:NH:Manchester\"], \"fee_currency\": \"LBC\", \"fee_amount\": \"0.3\", \"title\": \"Blank Image\", \"description\": \"A blank PNG that is 5x7.\", \"author\": \"Picaso\", \"license\": \"Public Domain\", \"license_url\": \"http://public-domain.org\", \"thumbnail_url\": \"http://smallmedia.com/thumbnail.jpg\", \"release_time\": 1555941592, \"channel_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"channel_account_id\": [], \"preview\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream create blank-image 1.0 /tmp/tmpx0pcyp9a.png --tags=blank --tags=art --languages=en --locations=US:NH:Manchester --fee_currency=LBC --fee_amount=0.3 --title=\"Blank Image\" --description=\"A blank PNG that is 5x7.\" --author=Picaso --license=\"Public Domain\" --license_url=http://public-domain.org --thumbnail_url=\"http://smallmedia.com/thumbnail.jpg\" --release_time=1555941592 --channel_id=\"cc242d221f78975c8011132882ee445b7d9b85cf\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_create\", \"params\": {\"name\": \"blank-image\", \"bid\": \"1.0\", \"file_path\": \"/tmp/tmpx0pcyp9a.png\", \"tags\": [\"blank\", \"art\"], \"languages\": [\"en\"], \"locations\": [\"US:NH:Manchester\"], \"fee_currency\": \"LBC\", \"fee_amount\": \"0.3\", \"title\": \"Blank Image\", \"description\": \"A blank PNG that is 5x7.\", \"author\": \"Picaso\", \"license\": \"Public Domain\", \"license_url\": \"http://public-domain.org\", \"thumbnail_url\": \"http://smallmedia.com/thumbnail.jpg\", \"release_time\": 1555941592, \"channel_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"channel_account_id\": [], \"preview\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000012457aced7b002a64d3ec487aece27963a3dc23db6604d6c751d3c6ade483547c010000006b483045022100860084c5e55a394c847e4e3fa1270a9b506013b48db7eb3428ebfa9621968f4f0220643de2010dd115f00773e8d11b67968f83cbf9cf36cf15105c7f70ab92bcb08e01210374980952dc354c690da1ab318a3968bbee1589d2bb94d74d178e3cee757515bdffffffff0200e1f50500000000fdcb01b50b626c616e6b2d696d6167654da00101cf859b7d5b44ee82281311805c97781f222d24cc291bbb2c67e9438461d61d7fbb1e8ccd889c432eda03f0ba66909a59ce9c1ac0c375a06a6f9c8a877a973e9cdad15070bca4367f6de301d56932055e782430d90ad5010a720a2006003bbee8aece0543ed9d9cecc48be1d996cfeff9837a1aed1d961caeda82af120f746d7078307063797039612e706e6718632209696d6167652f706e673230e09cdf12ee46f82ea9b22d67c315cce59be725cdadd409c4637d345ec5dbde159012719541390abe74a5c1df5c9085e6120650696361736f1a0d5075626c696320446f6d61696e2218687474703a2f2f7075626c69632d646f6d61696e2e6f726728d891f7e5053222080112196f9f4c376b984270e4ec75c870f0b5faac1b3dd6985c747a30188087a70e520408051007420b426c616e6b20496d6167654a184120626c616e6b20504e472074686174206973203578372e52252a23687474703a2f2f736d616c6c6d656469612e636f6d2f7468756d626e61696c2e6a70675a05626c616e6b5a03617274620208016a1308ec0112024e481a0a4d616e636865737465726d7576a9149f4c376b984270e4ec75c870f0b5faac1b3dd69888acac5e7d1d000000001976a9149d7e5639ce7ebcca168cc5a23d42e0b4525a323e88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mutWSX3pmSpGejnTgrMP8s1xCbPkuuzuH5\",\n        \"amount\": \"5.969662\",\n        \"confirmations\": 2,\n        \"height\": 213,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 1,\n        \"txid\": \"7c5483e4adc6d351c7d60466db23dca36379e2ec7a48ecd3642a007bedac5724\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mv3F3Amp2JPSMUz1BHRLfYFrdgoxUTHh4b\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"63395891e9172ef41f70197c08a528fd24bed596\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"is_channel_signature_valid\": true,\n        \"name\": \"blank-image\",\n        \"nout\": 0,\n        \"permanent_url\": \"blank-image#63395891e9172ef41f70197c08a528fd24bed596\",\n        \"signing_channel\": {\n          \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n          \"name\": \"@channel\",\n          \"value\": {\n            \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n            \"title\": \"New Channel\"\n          }\n        },\n        \"txid\": \"595056aa6d429d732a245ba6033b6ce54fa862a29c3a96da08a22acc4f3495a1\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"author\": \"Picaso\",\n          \"description\": \"A blank PNG that is 5x7.\",\n          \"fee\": {\n            \"address\": \"mv3F3Amp2JPSMUz1BHRLfYFrdgoxUTHh4b\",\n            \"amount\": 0.3,\n            \"currency\": \"LBC\"\n          },\n          \"image\": {\n            \"height\": 7,\n            \"width\": 5\n          },\n          \"languages\": [\n            \"en\"\n          ],\n          \"license\": \"Public Domain\",\n          \"license_url\": \"http://public-domain.org\",\n          \"locations\": [\n            {\n              \"city\": \"Manchester\",\n              \"country\": \"US\",\n              \"state\": \"NH\"\n            }\n          ],\n          \"release_time\": \"1555941592\",\n          \"source\": {\n            \"hash\": \"06003bbee8aece0543ed9d9cecc48be1d996cfeff9837a1aed1d961caeda82af\",\n            \"media_type\": \"image/png\",\n            \"name\": \"tmpx0pcyp9a.png\",\n            \"sd_hash\": \"e09cdf12ee46f82ea9b22d67c315cce59be725cdadd409c4637d345ec5dbde159012719541390abe74a5c1df5c9085e6\",\n            \"size\": \"99\"\n          },\n          \"stream_type\": \"image\",\n          \"tags\": [\n            \"blank\",\n            \"art\"\n          ],\n          \"thumbnail\": {\n            \"url\": \"http://smallmedia.com/thumbnail.jpg\"\n          },\n          \"title\": \"Blank Image\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"mushjCzKC83rDwJxoYeC6JRp8R6AEA9Ecw\",\n        \"amount\": \"4.947555\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"txid\": \"595056aa6d429d732a245ba6033b6ce54fa862a29c3a96da08a22acc4f3495a1\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.022107\",\n    \"total_input\": \"5.969662\",\n    \"total_output\": \"5.947555\",\n    \"txid\": \"595056aa6d429d732a245ba6033b6ce54fa862a29c3a96da08a22acc4f3495a1\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "stream_list",
                "description": "List my stream claims.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List all your stream claims",
                        "curl": "curl -d'{\"method\": \"stream_list\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_list\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    {\n      \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n      \"amount\": \"1.0\",\n      \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n      \"claim_op\": \"update\",\n      \"confirmations\": 1,\n      \"height\": 214,\n      \"is_change\": false,\n      \"is_channel_signature_valid\": true,\n      \"is_mine\": true,\n      \"name\": \"astream\",\n      \"nout\": 0,\n      \"permanent_url\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n      \"signing_channel\": {\n        \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n        \"name\": \"@channel\",\n        \"value\": {\n          \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n          \"title\": \"New Channel\"\n        }\n      },\n      \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n      \"type\": \"claim\",\n      \"value\": {\n        \"source\": {\n          \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n          \"media_type\": \"application/octet-stream\",\n          \"name\": \"tmpit97x87b\",\n          \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n          \"size\": \"11\"\n        }\n      },\n      \"value_type\": \"stream\"\n    }\n  ]\n}"
                    },
                    {
                        "title": "Paginate your stream claims",
                        "curl": "curl -d'{\"method\": \"stream_list\", \"params\": {\"page\": 1, \"page_size\": 20}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream list --page=1 --page_size=20",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_list\", \"params\": {\"page\": 1, \"page_size\": 20}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 1,\n        \"height\": 214,\n        \"is_change\": false,\n        \"is_channel_signature_valid\": true,\n        \"is_mine\": true,\n        \"name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"signing_channel\": {\n          \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n          \"name\": \"@channel\",\n          \"value\": {\n            \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n            \"title\": \"New Channel\"\n          }\n        },\n        \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpit97x87b\",\n            \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n            \"size\": \"11\"\n          }\n        },\n        \"value_type\": \"stream\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "stream_update",
                "description": "Update an existing stream claim and if a new file is provided announce it to lbrynet.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "id of the stream claim to update",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": false
                    },
                    {
                        "name": "file_path",
                        "type": "str",
                        "description": "path to file to be associated with name.",
                        "is_required": false
                    },
                    {
                        "name": "fee_currency",
                        "type": "string",
                        "description": "specify fee currency",
                        "is_required": false
                    },
                    {
                        "name": "fee_amount",
                        "type": "decimal",
                        "description": "content download fee",
                        "is_required": false
                    },
                    {
                        "name": "fee_address",
                        "type": "str",
                        "description": "address where to send fee payments, will use value from --claim_address if not provided",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "author",
                        "type": "str",
                        "description": "author of the publication. The usage for this field is not the same as for channels. The author field is used to credit an author who is not the publisher and is not represented by the channel. For example, a pdf file of 'The Odyssey' has an author of 'Homer' but may by published to a channel such as '@classics', or to no channel at all",
                        "is_required": false
                    },
                    {
                        "name": "clear_tags",
                        "type": "bool",
                        "description": "clear existing tags (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "add content tags",
                        "is_required": false
                    },
                    {
                        "name": "clear_languages",
                        "type": "bool",
                        "description": "clear existing languages (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "clear_locations",
                        "type": "bool",
                        "description": "clear existing locations (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations relevant to the stream, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "license",
                        "type": "str",
                        "description": "publication license",
                        "is_required": false
                    },
                    {
                        "name": "license_url",
                        "type": "str",
                        "description": "publication license url",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "release_time",
                        "type": "int",
                        "description": "original public release of content, seconds since UNIX epoch",
                        "is_required": false
                    },
                    {
                        "name": "width",
                        "type": "int",
                        "description": "image/video width, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "height",
                        "type": "int",
                        "description": "image/video height, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "duration",
                        "type": "int",
                        "description": "audio/video duration in seconds, automatically calculated",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "clear_channel",
                        "type": "bool",
                        "description": "remove channel signature",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to use for funding the transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the claim is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Update a stream claim to add channel",
                        "curl": "curl -d'{\"method\": \"stream_update\", \"params\": {\"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\", \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"channel_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"clear_channel\": false, \"channel_account_id\": [], \"preview\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream update e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806 --channel_id=\"cc242d221f78975c8011132882ee445b7d9b85cf\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_update\", \"params\": {\"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\", \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"channel_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\", \"clear_channel\": false, \"channel_account_id\": [], \"preview\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000022457aced7b002a64d3ec487aece27963a3dc23db6604d6c751d3c6ade483547c000000006a47304402203447e5a488e894ee593afbcd77d55ef5df396aae03f85deebbc98bc44024717d022017dedf59c6e1c7912383e27e9fb71153fd0bd4966bedd4eb90d1daf078363006012103480815803999a8661f93bc2ab3c7c31eb09ac4091db1851fd716c848e9123eb1ffffffff310268e1c0b2305134a0b78fbc5147f696183012cc25fc9121458bdb068e9802010000006b483045022100d6699a1ccf10bfef8e10068e5143daa4079a2f946648b62448a08b4e67bde35c02201525dc2739959425b09b39ac02f0371db17e0672b8facac652a0c2248466dd38012102b5ce454bb07852af21afda5712266262f68d348d4b86e12f6216c2ca72656a1cffffffff0200e1f50500000000fd1101b7076173747265616d1406f86ca8a34023b87bf9da5fb1cb7b30a3e8f3e34cd601cf859b7d5b44ee82281311805c97781f222d24cce145c0ad7c3c76cd83b5f8044d097413f4198e39a8b4d8012e4055de83212fb94c12834f444142c49a9f46a786b31236b79c7612bdfccae897ef372792b9894e0a7f0a7d0a20b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9120b746d706974393778383762180b22186170706c69636174696f6e2f6f637465742d73747265616d3230a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc76d6d76a914b122754d9d7432f98eec4e87c21b4982c8b9280e88acb6a3d205000000001976a914562905c720fc14ccdc15f7a450968d0a65709bb488ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"claim_op\": \"create\",\n        \"confirmations\": 1,\n        \"height\": 213,\n        \"is_change\": false,\n        \"is_mine\": true,\n        \"name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"txid\": \"7c5483e4adc6d351c7d60466db23dca36379e2ec7a48ecd3642a007bedac5724\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpit97x87b\",\n            \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n            \"size\": \"11\"\n          }\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"mipDsnN5CyVPiXcD4WNB3swqCCmzM8w44w\",\n        \"amount\": \"0.9772285\",\n        \"confirmations\": 3,\n        \"height\": 211,\n        \"is_change\": true,\n        \"is_mine\": true,\n        \"nout\": 1,\n        \"txid\": \"02988e06db8b452191fc25cc12301896f64751bc8fb7a0345130b2c0e1680231\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mwfZBCwuyWaCV9X91UAK2GTkYcRekL3Vj9\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"claim_op\": \"update\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"is_channel_signature_valid\": true,\n        \"name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"astream#e3f3e8a3307bcbb15fdaf97bb82340a3a86cf806\",\n        \"signing_channel\": {\n          \"claim_id\": \"cc242d221f78975c8011132882ee445b7d9b85cf\",\n          \"name\": \"@channel\",\n          \"value\": {\n            \"public_key\": \"3056301006072a8648ce3d020106052b8104000a03420004e6ab4d7651711fcd98a4b679ff1af1de0d3d0881211e53bba9a45f19e37521e6fa8a7c42483a064974d386098348bab6c6fe53eafe304ebde031dd9aface6119\",\n            \"title\": \"New Channel\"\n          }\n        },\n        \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpit97x87b\",\n            \"sd_hash\": \"a2d66638a51b1621538a92fe3fc4f7a34926dc415652d107b89e28d0bd962074b5bb758adfb3de55053f5cd4dfd97cc7\",\n            \"size\": \"11\"\n          }\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"moNXYrE94UaXdKrzS81cZKkmWLWSSSYe8n\",\n        \"amount\": \"0.9769055\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000323\",\n    \"total_input\": \"1.9772285\",\n    \"total_output\": \"1.9769055\",\n    \"txid\": \"eb2ff25e7588ea9bc5adeaf80ea66bff8770b5c983754e305b68e5b4199db898\"\n  }\n}"
                    }
                ]
            }
        ]
    },
    "support": {
        "doc": "Create, list and abandon all types of supports.",
        "commands": [
            {
                "name": "support_abandon",
                "description": "Abandon supports, including tips, of a specific claim, optionally\nkeeping some amount as supports.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "txid of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "nout of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "keep",
                        "type": "decimal",
                        "description": "amount of lbc to keep as support",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until abandon is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "support_create",
                "description": "Create a support or a tip for name claim.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the claim to support",
                        "is_required": true
                    },
                    {
                        "name": "amount",
                        "type": "decimal",
                        "description": "amount of support",
                        "is_required": true
                    },
                    {
                        "name": "tip",
                        "type": "bool",
                        "description": "send support to claim owner, default: false.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "support_list",
                "description": "List supports and tips in my control.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ]\n            }",
                "examples": []
            }
        ]
    },
    "sync": {
        "doc": "Wallet synchronization.",
        "commands": [
            {
                "name": "sync_apply",
                "description": "Apply incoming synchronization data, if provided, and then produce a sync hash and\nan encrypted wallet.",
                "arguments": [
                    {
                        "name": "password",
                        "type": "str",
                        "description": "password to decrypt incoming and encrypt outgoing data",
                        "is_required": false
                    },
                    {
                        "name": "data",
                        "type": "str",
                        "description": "incoming sync data, if any",
                        "is_required": false
                    },
                    {
                        "name": "encrypt-password",
                        "type": "str",
                        "description": "password to encrypt outgoing data if different from the decrypt password, used during password changes",
                        "is_required": false
                    }
                ],
                "returns": "(map) sync hash and data",
                "examples": []
            },
            {
                "name": "sync_hash",
                "description": "Deterministic hash of the wallet.",
                "arguments": [],
                "returns": "(str) sha256 hash of wallet",
                "examples": []
            }
        ]
    },
    "transaction": {
        "doc": "Transaction management.",
        "commands": [
            {
                "name": "transaction_list",
                "description": "List transactions belonging to wallet",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "(list) List of transactions\n\n    {\n        \"claim_info\": (list) claim info if in txn [{\n                                                \"address\": (str) address of claim,\n                                                \"balance_delta\": (float) bid amount,\n                                                \"amount\": (float) claim amount,\n                                                \"claim_id\": (str) claim id,\n                                                \"claim_name\": (str) claim name,\n                                                \"nout\": (int) nout\n                                                }],\n        \"abandon_info\": (list) abandon info if in txn [{\n                                                \"address\": (str) address of abandoned claim,\n                                                \"balance_delta\": (float) returned amount,\n                                                \"amount\": (float) claim amount,\n                                                \"claim_id\": (str) claim id,\n                                                \"claim_name\": (str) claim name,\n                                                \"nout\": (int) nout\n                                                }],\n        \"confirmations\": (int) number of confirmations for the txn,\n        \"date\": (str) date and time of txn,\n        \"fee\": (float) txn fee,\n        \"support_info\": (list) support info if in txn [{\n                                                \"address\": (str) address of support,\n                                                \"balance_delta\": (float) support amount,\n                                                \"amount\": (float) support amount,\n                                                \"claim_id\": (str) claim id,\n                                                \"claim_name\": (str) claim name,\n                                                \"is_tip\": (bool),\n                                                \"nout\": (int) nout\n                                                }],\n        \"timestamp\": (int) timestamp,\n        \"txid\": (str) txn id,\n        \"update_info\": (list) update info if in txn [{\n                                                \"address\": (str) address of claim,\n                                                \"balance_delta\": (float) credited/debited\n                                                \"amount\": (float) absolute amount,\n                                                \"claim_id\": (str) claim id,\n                                                \"claim_name\": (str) claim name,\n                                                \"nout\": (int) nout\n                                                }],\n        \"value\": (float) value of txn\n    }",
                "examples": [
                    {
                        "title": "List your transactions",
                        "curl": "curl -d'{\"method\": \"transaction_list\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet transaction list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"transaction_list\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    {\n      \"abandon_info\": [],\n      \"claim_info\": [],\n      \"confirmations\": 1,\n      \"date\": \"2019-04-22 10:00\",\n      \"fee\": \"-0.000124\",\n      \"support_info\": [],\n      \"timestamp\": 1555941617,\n      \"txid\": \"54077accaaa814dd35b2cc6bc59db0e6ff9bbcf0aed151b2e22465579b58341e\",\n      \"update_info\": [],\n      \"value\": \"-2.0\"\n    },\n    {\n      \"abandon_info\": [],\n      \"claim_info\": [],\n      \"confirmations\": 7,\n      \"date\": \"2019-04-22 10:00\",\n      \"fee\": \"0.0\",\n      \"support_info\": [],\n      \"timestamp\": 1555941616,\n      \"txid\": \"c63d1786b696ab47e1e914f64266a34a5b0027549f78c7d4774767c239a137ac\",\n      \"update_info\": [],\n      \"value\": \"10.0\"\n    }\n  ]\n}"
                    }
                ]
            },
            {
                "name": "transaction_show",
                "description": "Get a decoded transaction from a txid",
                "arguments": [
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "txid of the transaction",
                        "is_required": true
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            }
        ]
    },
    "utxo": {
        "doc": "Unspent transaction management.",
        "commands": [
            {
                "name": "utxo_list",
                "description": "List unspent transaction outputs",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'payment'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim' or 'support', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\"\n                    }\n                ]\n            }",
                "examples": []
            },
            {
                "name": "utxo_release",
                "description": "When spending a UTXO it is locally locked to prevent double spends;\noccasionally this can result in a UTXO being locked which ultimately\ndid not get spent (failed to broadcast, spend transaction was not\naccepted by blockchain node, etc). This command releases the lock\non all UTXOs in your account.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    }
                ],
                "returns": "None",
                "examples": []
            }
        ]
    }
}